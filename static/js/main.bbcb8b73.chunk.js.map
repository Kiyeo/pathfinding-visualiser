{"version":3,"sources":["components/Node.jsx","algorithms/dijkstra.js","App.js","reportWebVitals.js","index.js"],"names":["forwardRef","props","ref","row","col","isStart","isFinish","handleMouseDownForNode","handleMouseEnterForNode","handleMouseUpForNode","displayWeight","isShowWeight","extraClassName","id","onMouseDown","onMouseEnter","onMouseUp","onDragStart","e","preventDefault","stopPropagation","className","Infinity","dijkstra","grid","startNode","finishNode","isRandomWeights","isVisited","finishNodeNeighbours","getUnvisitedNeighbors","finishNodeNeighbourVisits","visitedNodes","distance","cumulativeWeight","unvisitedNodes","nodes","node","push","getAllNodes","heapSortNodesByDistance","closestNode","shift","isWall","finishNodeNeighbour","length","filter","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbor","distace","previousNode","neighbors","neighborOperations","totalRows","totalCols","i","operation","newRow","newCol","App","useRef","getInitialGrid","currentRow","createNode","current","useState","setGrid","isVisualising","setIsVisualising","isPostVisualise","setIsPostVisualise","visitedNodeOrder","nodeRefArray","isResetting","timeOut","isMousePressed","setIsMousePressed","isStartFinishNode","setIsNewStartNode","isNewFinishNode","setIsNewFinishNode","useEffect","setNewStartOrFinishNode","newGrid","slice","prevNodeValues","currentStartFinishNode","type","newStartFinishNode","prevStartFinishNodeValues","prevStartFinishNode","animateShortestPath","nodesInShortestPathOrder","delay","setTimeout","visualiseDijkstra","resetVisitedNodeCSS","nodeStart","nodeFinish","currentNode","unshift","getNodesInShortestPathOrder","nodeRef","innerText","animateDijkstra","onClick","forEach","timer","clearTimeout","initialGrid","resetGrid","disabled","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","Math","random","ceil","randomWeights","onMouseLeave","style","margin","display","gridTemplateColumns","width","NUM_COLUMNS","map","el","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bbcb8b73.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\nimport \"./Node.css\";\n\nexport default forwardRef((props, ref) => {\n  const {\n    row,\n    col,\n    isStart,\n    isFinish,\n    handleMouseDownForNode,\n    handleMouseEnterForNode,\n    handleMouseUpForNode,\n    displayWeight,\n    isShowWeight,\n  } = props;\n  const extraClassName = isFinish ? \"node-finish\" : isStart ? \"node-start\" : \"\";\n\n  return (\n    <div\n      id={`${row}-${col}`}\n      onMouseDown={() => {\n        handleMouseDownForNode(row, col);\n      }}\n      onMouseEnter={() => {\n        handleMouseEnterForNode(row, col);\n      }}\n      onMouseUp={() => {\n        handleMouseUpForNode();\n      }}\n      onDragStart={(e) => {\n        // Block drag default event\n        e.preventDefault();\n        e.stopPropagation();\n      }}\n      ref={ref}\n      className={`node ${extraClassName}`}\n    >\n      {isStart\n        ? \"\"\n        : isFinish\n        ? \"\"\n        : displayWeight === Infinity\n        ? \"\"\n        : isShowWeight\n        ? \"\"\n        : displayWeight}\n    </div>\n  );\n});\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode, isRandomWeights) {\n  finishNode.isVisited = false;\n  const finishNodeNeighbours = getUnvisitedNeighbors(finishNode, grid);\n  let finishNodeNeighbourVisits = 0;\n  const visitedNodes = [];\n  startNode.distance = 0;\n  startNode.cumulativeWeight = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  // terminates when finishNode is reached\n  while (true) {\n    heapSortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    //if (closestNode.distance === Infinity) return visitedNodes;\n    closestNode.isVisited = true;\n    visitedNodes.push(closestNode);\n    if (isRandomWeights) {\n      for (const finishNodeNeighbour of finishNodeNeighbours) {\n        const row = finishNodeNeighbour.row;\n        const col = finishNodeNeighbour.col;\n        if (\n          closestNode.row === row &&\n          closestNode.col === col &&\n          closestNode.isVisited\n        ) {\n          finishNodeNeighbourVisits++;\n        }\n      }\n      if (finishNodeNeighbourVisits === finishNodeNeighbours.length) {\n        finishNodeNeighbours.filter((node) => (node.isVisited = false));\n        return visitedNodes;\n      }\n    } else {\n      if (closestNode === finishNode) return visitedNodes;\n    }\n    updateUnvisitedNeighbors(closestNode, grid, isRandomWeights);\n  }\n}\n\nfunction heapSortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid, isRandomWeights) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    // for weighted simulation\n    if (isRandomWeights) {\n      if (neighbor.distace === Infinity) {\n        neighbor.distance = neighbor.displayWeight + node.cumulativeWeight;\n        neighbor.cumulativeWeight = neighbor.distance;\n        neighbor.previousNode = node;\n      }\n      // checks and updates the neighbors for the path with the less cost\n      else if (\n        neighbor.distance >\n        neighbor.displayWeight + node.cumulativeWeight\n      ) {\n        neighbor.distance = neighbor.displayWeight + node.cumulativeWeight;\n        neighbor.cumulativeWeight = neighbor.distance;\n        neighbor.previousNode = node;\n      }\n    }\n    // for unweighted simulation\n    else {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { row, col } = node;\n  const neighborOperations = [\n    [0, 1],\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n  ];\n  const totalRows = grid.length;\n  const totalCols = grid[0].length;\n  //constant opeations => 4 values\n  for (let i = 0; i < neighborOperations.length; i++) {\n    const operation = neighborOperations[i];\n    const x = operation[0];\n    const y = operation[1];\n    const newRow = row + x;\n    const newCol = col - y;\n    if (\n      newRow >= 0 &&\n      newRow < totalRows &&\n      newCol >= 0 &&\n      newCol < totalCols\n    ) {\n      neighbors.push(grid[newRow][newCol]);\n    }\n  }\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Node from \"./components/Node.jsx\";\nimport {\n  getNodesInShortestPathOrder,\n  dijkstra,\n} from \"./algorithms/dijkstra.js\";\nimport \"./App.css\";\n\nconst NUM_ROWS = 20;\nconst NUM_COLUMNS = 50;\nconst NODE_PIXEL = 25;\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nconst App = () => {\n  const startNode = useRef();\n  const finishNode = useRef();\n\n  const getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < NUM_ROWS; row++) {\n      const currentRow = [];\n      for (let col = 0; col < NUM_COLUMNS; col++) {\n        currentRow.push(createNode(row, col));\n        if (row === START_NODE_ROW && col === START_NODE_COL)\n          startNode.current = { row, col };\n        if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL)\n          finishNode.current = { row, col };\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  const createNode = (\n    row,\n    col,\n    cumulativeWeight = null,\n    startNode = { row: START_NODE_ROW, col: START_NODE_COL },\n    finishNode = { row: FINISH_NODE_ROW, col: FINISH_NODE_COL }\n  ) => {\n    return {\n      row,\n      col,\n      isStart: row === startNode.row && col === startNode.col,\n      isFinish: row === finishNode.row && col === finishNode.col,\n      isVisited: false,\n      distance: Infinity,\n      previousNode: null,\n      displayWeight: cumulativeWeight,\n      cumulativeWeight,\n      isShowWeight: false,\n    };\n  };\n\n  const [grid, setGrid] = useState(() => getInitialGrid());\n  const [isVisualising, setIsVisualising] = useState(false);\n  const [isPostVisualise, setIsPostVisualise] = useState(false);\n  const visitedNodeOrder = useRef([]);\n  const nodeRefArray = useRef([]);\n  const isResetting = useRef(false);\n  const isRandomWeights = useRef(false);\n  const timeOut = useRef([]);\n  const [isMousePressed, setIsMousePressed] = useState(false);\n  const [isStartFinishNode, setIsNewStartNode] = useState(false);\n  const [isNewFinishNode, setIsNewFinishNode] = useState(false);\n\n  useEffect(() => {}, []);\n\n  const handleMouseDownForNode = (row, col) => {\n    setIsMousePressed(true);\n    if (\n      row === startNode.current.row &&\n      col === startNode.current.col &&\n      !isVisualising &&\n      !isPostVisualise\n    ) {\n      setIsNewStartNode(true);\n    }\n    if (\n      row === finishNode.current.row &&\n      col === finishNode.current.col &&\n      !isVisualising &&\n      !isPostVisualise\n    ) {\n      setIsNewFinishNode(true);\n    }\n  };\n\n  const handleMouseEnterForNode = (row, col) => {\n    if (!isMousePressed && !isVisualising) return;\n    if (\n      isStartFinishNode &&\n      !(row === finishNode.current.row && col === finishNode.current.col)\n    ) {\n      setNewStartOrFinishNode(grid, row, col);\n    }\n    if (\n      isNewFinishNode &&\n      !(row === startNode.current.row && col === startNode.current.col)\n    ) {\n      setNewStartOrFinishNode(grid, row, col);\n    }\n  };\n\n  const handleMouseUpForNode = () => {\n    setIsMousePressed(false);\n    setIsNewStartNode(false);\n    setIsNewFinishNode(false);\n  };\n\n  const handleMouseLeaveForGrid = () => {\n    setIsMousePressed(false);\n    setIsNewStartNode(false);\n    setIsNewFinishNode(false);\n  };\n\n  const setNewStartOrFinishNode = (grid, row, col) => {\n    const newGrid = grid.slice();\n    // keep the new start or finish nodes previous (json) values\n    const prevNodeValues = newGrid[row][col];\n    const currentStartFinishNode = isStartFinishNode\n      ? startNode.current\n      : finishNode.current;\n    // only change the type of the start or finish node\n    const type = isStartFinishNode ? \"isStart\" : \"isFinish\";\n    const newStartFinishNode = {\n      ...prevNodeValues,\n      [type]: true,\n    };\n    const prevStartFinishNodeValues =\n      newGrid[currentStartFinishNode.row][currentStartFinishNode.col];\n    // change the old start or finish node type to false\n    const prevStartFinishNode = {\n      ...prevStartFinishNodeValues,\n      [type]: false,\n    };\n    newGrid[row][col] = newStartFinishNode;\n    newGrid[currentStartFinishNode.row][\n      currentStartFinishNode.col\n    ] = prevStartFinishNode;\n    // update start or finish node reference\n    if (isStartFinishNode) {\n      startNode.current = { row, col };\n    } else {\n      finishNode.current = { row, col };\n    }\n    setGrid(newGrid);\n  };\n\n  const animateDijkstra = (visitedNodeOrder, nodesInShortestPathOrder) => {\n    for (let i = 0; i <= visitedNodeOrder.length; i++) {\n      if (i === visitedNodeOrder.length) {\n        timeOut.current.push(\n          setTimeout(() => {\n            animateShortestPath(nodesInShortestPathOrder);\n          }, 5 * i)\n        );\n        return;\n      }\n      timeOut.current.push(\n        setTimeout(() => {\n          const node = visitedNodeOrder[i];\n          const nodeRef = nodeRefArray.current[`${node.row}-${node.col}`];\n          // displays cumulative weight if in random weight simulation\n          if (isRandomWeights.current)\n            nodeRef.innerText = `${node.cumulativeWeight}`;\n          nodeRef.className = \"node node-visited\";\n        }, 5 * i)\n      );\n    }\n  };\n\n  const animateShortestPath = (nodesInShortestPathOrder) => {\n    let delay = 0;\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      delay = i;\n      timeOut.current.push(\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          nodeRefArray.current[`${node.row}-${node.col}`].className =\n            \"node node-shortest-path\";\n        }, 50 * i)\n      );\n    }\n    timeOut.current.push(setTimeout(() => setIsVisualising(false), 50 * delay));\n    setIsPostVisualise(true);\n  };\n\n  const visualiseDijkstra = () => {\n    // resets css when resimulating\n    if (isPostVisualise) resetVisitedNodeCSS();\n    setIsVisualising(true);\n    const nodeStart = grid[startNode.current.row][startNode.current.col];\n    const nodeFinish = grid[finishNode.current.row][finishNode.current.col];\n    visitedNodeOrder.current = dijkstra(\n      grid,\n      nodeStart,\n      nodeFinish,\n      isRandomWeights.current\n    );\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(nodeFinish);\n    animateDijkstra(visitedNodeOrder.current, nodesInShortestPathOrder);\n  };\n\n  const resetGrid = () => {\n    isRandomWeights.current = false;\n    timeOut.current.forEach((timer) => {\n      clearTimeout(timer);\n    });\n    isResetting.current = true;\n    setIsVisualising(false);\n    setIsMousePressed(false);\n    setIsPostVisualise(false);\n    const initialGrid = getInitialGrid();\n    setGrid(initialGrid);\n    resetVisitedNodeCSS();\n  };\n\n  const resetVisitedNodeCSS = () => {\n    const nodeStart = isPostVisualise\n      ? startNode.current\n      : { row: START_NODE_ROW, col: START_NODE_COL };\n    const nodeFinish = isPostVisualise\n      ? finishNode.current\n      : { row: FINISH_NODE_ROW, col: FINISH_NODE_COL };\n    for (let i = 0; i < visitedNodeOrder.current.length; i++) {\n      const node = visitedNodeOrder.current[i];\n      const nodeRef = nodeRefArray.current[`${node.row}-${node.col}`];\n      if (node.row === nodeStart.row && node.col === nodeStart.col) {\n        nodeRef.innerText = \"\";\n        nodeRef.className = \"node node-start\";\n      } else if (node.row === nodeFinish.row && node.col === nodeFinish.col) {\n        nodeRef.innerText = \"\";\n        nodeRef.className = \"node node-finish\";\n      } else {\n        if (isPostVisualise && isRandomWeights.current) {\n          nodeRef.innerText = `${node.displayWeight}`;\n        } else {\n          nodeRef.innerText = \"\";\n        }\n        nodeRef.className = \"node\";\n      }\n    }\n  };\n\n  const randomWeights = () => {\n    isRandomWeights.current = true;\n    const grid = [];\n    const startNodeRow = startNode.current.row;\n    const startNodeCol = startNode.current.col;\n    const finishNodeRow = finishNode.current.row;\n    const finishNodeCol = finishNode.current.col;\n    for (let row = 0; row < NUM_ROWS; row++) {\n      const currentRow = [];\n      for (let col = 0; col < NUM_COLUMNS; col++) {\n        const nodeRef = nodeRefArray.current[`${row}-${col}`];\n        if (row === startNodeRow && col === startNodeCol) {\n          currentRow.push(\n            createNode(\n              startNodeRow,\n              startNodeCol,\n              null,\n              { row: startNodeRow, col: startNodeCol },\n              { row: finishNodeRow, col: finishNodeCol }\n            )\n          );\n          nodeRef.className = \"node node-start\";\n        } else if (row === finishNodeRow && col === finishNodeCol) {\n          currentRow.push(\n            createNode(\n              finishNodeRow,\n              finishNodeCol,\n              null,\n              { row: startNodeRow, col: startNodeCol },\n              { row: finishNodeRow, col: finishNodeCol }\n            )\n          );\n          nodeRef.className = \"node node-finish\";\n        } else {\n          currentRow.push(\n            createNode(\n              row,\n              col,\n              Math.random() > 0.5 ? Math.ceil(Math.random() * 10) : 1,\n              { row: startNodeRow, col: startNodeCol },\n              { row: finishNodeRow, col: finishNodeCol }\n            )\n          );\n          nodeRef.className = \"node\";\n        }\n      }\n      grid.push(currentRow);\n    }\n    setGrid(grid);\n  };\n\n  return (\n    <div className=\"App\">\n      <button onClick={() => resetGrid()}>Reset</button>\n      <button\n        disabled={isVisualising || isPostVisualise}\n        onClick={() => randomWeights()}\n      >\n        Random Weights\n      </button>\n      <button disabled={isVisualising} onClick={() => visualiseDijkstra()}>\n        Visualise Dijkstra's Algorithm\n      </button>\n      <div\n        className=\"grid\"\n        onMouseLeave={() => handleMouseLeaveForGrid()}\n        style={{\n          margin: \"100px auto\",\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${NUM_COLUMNS}, ${NODE_PIXEL}px)`,\n          //makes the grid width relative to sum of all node pixels\n          width: `${NUM_COLUMNS * NODE_PIXEL}px`,\n        }}\n      >\n        {grid.map((row) =>\n          row.map((node) => {\n            const {\n              row,\n              col,\n              isStart,\n              isFinish,\n              isVisited,\n              displayWeight,\n              cumulativeWeight,\n              isShowWeight,\n            } = node;\n            return (\n              <Node\n                key={`${row}-${col}`}\n                ref={(el) => (nodeRefArray.current[`${row}-${col}`] = el)}\n                handleMouseDownForNode={(row, col) =>\n                  handleMouseDownForNode(row, col)\n                }\n                handleMouseEnterForNode={(row, col) =>\n                  handleMouseEnterForNode(row, col)\n                }\n                handleMouseUpForNode={() => handleMouseUpForNode()}\n                row={row}\n                col={col}\n                isStart={isStart}\n                isFinish={isFinish}\n                isVisited={isVisited}\n                displayWeight={displayWeight}\n                cumulativeWeight={cumulativeWeight}\n                isShowWeight={isShowWeight}\n              ></Node>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}