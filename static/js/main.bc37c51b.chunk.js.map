{"version":3,"sources":["components/Node.jsx","components/Button.jsx","algorithms/dijkstra.js","App.js","reportWebVitals.js","index.js"],"names":["forwardRef","props","ref","row","col","isWall","isStart","isFinish","handleMouseDownForNode","handleMouseEnterForNode","handleMouseUpForNode","handleTouchMoveForNode","displayWeight","isShowWeight","extraClassName","id","onPointerDown","onPointerEnter","onPointerUp","onDragStart","e","preventDefault","stopPropagation","className","Infinity","Button","type","handleFunction","disable","title","disabledTitle","isVisualising","isPostVisualise","text","replace","match","toUpperCase","displayText","displayTitle","shape","disabled","onClick","dijkstra","grid","startNode","finishNode","isRandomWeights","isVisited","finishNodeNeighbours","getUnvisitedNeighbors","finishNodeNeighbourVisits","visitedNodes","distance","cumulativeWeight","unvisitedNodes","nodes","node","push","getAllNodes","heapSortNodesByDistance","closestNode","shift","length","finishNodeNeighbour","filter","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbor","distace","previousNode","neighbors","neighborOperations","totalRows","totalCols","i","operation","newRow","newCol","App","useRef","getInitialGrid","currentRow","createNode","current","useState","setGrid","setIsVisualising","setIsPostVisualise","visitedNodeOrder","nodeRefArray","isResetting","timeOut","isMousePressed","setIsMousePressed","isStartFinishNode","setIsNewStartNode","isNewFinishNode","setIsNewFinishNode","setWall","newGrid","slice","prevNodeValues","wallNode","setNewStartOrFinishNode","currentStartFinishNode","newStartFinishNode","prevStartFinishNodeValues","prevStartFinishNode","Math","ceil","random","animateShortestPath","nodesInShortestPathOrder","delay","setTimeout","visualiseDijkstra","resetVisitedNodeCSS","nodeStart","nodeFinish","currentNode","unshift","getNodesInShortestPathOrder","nodeRef","innerText","animateDijkstra","randomWeights","isRandomWeightBool","isRestore","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","style","margin","forEach","timer","clearTimeout","initialGrid","resetGrid","restoreGrid","onMouseLeave","display","gridTemplateColumns","gridTemplateRows","width","NUM_COLUMNS","touchAction","map","el","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc37c51b.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\nimport \"./Node.css\";\n\nexport default forwardRef((props, ref) => {\n  const {\n    row,\n    col,\n    isWall,\n    isStart,\n    isFinish,\n    handleMouseDownForNode,\n    handleMouseEnterForNode,\n    handleTouchMoveForNode,\n    handleMouseUpForNode,\n    displayWeight,\n    isShowWeight,\n  } = props;\n  const extraClassName = isFinish\n    ? \"node-finish\"\n    : isStart\n    ? \"node-start\"\n    : isWall\n    ? \"node-wall\"\n    : \"\";\n\n  return (\n    <div\n      id={`${row}-${col}`}\n      onPointerDown={() => {\n        handleMouseDownForNode(row, col);\n      }}\n      onPointerEnter={() => {\n        handleMouseEnterForNode(row, col);\n      }}\n      //onTouchMove={(e) => {\n      //  handleTouchMoveForNode(e);\n      //}}\n      onPointerUp={() => {\n        handleMouseUpForNode();\n      }}\n      onDragStart={(e) => {\n        // Block drag default event\n        e.preventDefault();\n        e.stopPropagation();\n      }}\n      ref={ref}\n      className={`node ${extraClassName}`}\n    >\n      {isStart\n        ? \"\"\n        : isFinish\n        ? \"\"\n        : displayWeight === Infinity\n        ? \"\"\n        : isShowWeight && !isWall\n        ? \"\"\n        : displayWeight}\n    </div>\n  );\n});\n","import React from \"react\";\nimport \"./Button.css\";\n\nexport default function Button(props) {\n  const {\n    type,\n    handleFunction,\n    disable,\n    title,\n    disabledTitle,\n    isVisualising,\n    isPostVisualise,\n  } = props;\n  const text = type\n    .replace(\"-\", \" \")\n    .replace(/(^\\w{1})|(\\s{1}\\w{1})/g, (match) => match.toUpperCase());\n  const displayText =\n    type === \"visualise\" && isPostVisualise && !isVisualising\n      ? \"Revisualise\"\n      : type === \"visualise\" && isVisualising\n      ? \"Visualising\"\n      : text;\n  const displayTitle =\n    type === \"restore\" && disable\n      ? disabledTitle\n      : type === \"random-weights\" && !disable\n      ? title\n      : type === \"random-weights\" && disable\n      ? disabledTitle\n      : \"\";\n  const className = isVisualising\n    ? `${type} visualising loading`\n    : isPostVisualise\n    ? `${type} notify`\n    : type;\n\n  return (\n    <button\n      shape={\"round\"}\n      title={displayTitle}\n      className={className}\n      disabled={disable}\n      onClick={() => handleFunction()}\n    >\n      {isVisualising && <i className={\"spinner\"} />}\n      {displayText}\n    </button>\n  );\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode, isRandomWeights) {\n  finishNode.isVisited = false;\n  finishNode.isWall = false;\n  const finishNodeNeighbours = getUnvisitedNeighbors(finishNode, grid);\n  let finishNodeNeighbourVisits = 0;\n  const visitedNodes = [];\n  startNode.distance = 0;\n  startNode.cumulativeWeight = 0;\n  startNode.isWall = false;\n  const unvisitedNodes = getAllNodes(grid);\n  // terminates when finishNode is reached\n  while (true) {\n    heapSortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodes;\n    closestNode.isVisited = true;\n    visitedNodes.push(closestNode);\n    if (isRandomWeights && finishNodeNeighbours.length > 1) {\n      for (const finishNodeNeighbour of finishNodeNeighbours) {\n        const row = finishNodeNeighbour.row;\n        const col = finishNodeNeighbour.col;\n        if (\n          closestNode.row === row &&\n          closestNode.col === col &&\n          closestNode.isVisited\n        ) {\n          finishNodeNeighbourVisits++;\n        }\n      }\n      if (finishNodeNeighbourVisits === finishNodeNeighbours.length) {\n        finishNodeNeighbours.filter((node) => (node.isVisited = false));\n        return visitedNodes;\n      }\n    } else {\n      if (closestNode === finishNode) return visitedNodes;\n    }\n    updateUnvisitedNeighbors(closestNode, grid, isRandomWeights);\n  }\n}\n\nfunction heapSortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid, isRandomWeights) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    // for weighted simulation\n    if (isRandomWeights) {\n      if (neighbor.distace === Infinity) {\n        neighbor.distance = neighbor.displayWeight + node.cumulativeWeight;\n        neighbor.cumulativeWeight = neighbor.distance;\n        neighbor.previousNode = node;\n      }\n      // checks and updates the neighbors for the path with the less cost\n      else if (\n        neighbor.distance >\n        neighbor.displayWeight + node.cumulativeWeight\n      ) {\n        neighbor.distance = neighbor.displayWeight + node.cumulativeWeight;\n        neighbor.cumulativeWeight = neighbor.distance;\n        neighbor.previousNode = node;\n      }\n    }\n    // for unweighted simulation\n    else {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { row, col } = node;\n  const neighborOperations = [\n    [0, 1],\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n  ];\n  const totalRows = grid.length;\n  const totalCols = grid[0].length;\n  //constant opeations => 4 values\n  for (let i = 0; i < neighborOperations.length; i++) {\n    const operation = neighborOperations[i];\n    const x = operation[0];\n    const y = operation[1];\n    const newRow = row + x;\n    const newCol = col - y;\n    if (\n      newRow >= 0 &&\n      newRow < totalRows &&\n      newCol >= 0 &&\n      newCol < totalCols &&\n      !grid[newRow][newCol].isWall\n    ) {\n      neighbors.push(grid[newRow][newCol]);\n    }\n  }\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { useState, useRef } from \"react\";\nimport Node from \"./components/Node.jsx\";\nimport Button from \"./components/Button.jsx\";\nimport {\n  getNodesInShortestPathOrder,\n  dijkstra,\n} from \"./algorithms/dijkstra.js\";\nimport \"./App.css\";\n\nconst NUM_ROWS = 20;\nconst NUM_COLUMNS = 50;\nconst NODE_REM = 2;\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nconst App = () => {\n  const startNode = useRef();\n  const finishNode = useRef();\n\n  const getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < NUM_ROWS; row++) {\n      const currentRow = [];\n      for (let col = 0; col < NUM_COLUMNS; col++) {\n        currentRow.push(createNode(row, col));\n        if (row === START_NODE_ROW && col === START_NODE_COL)\n          startNode.current = { row, col };\n        if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL)\n          finishNode.current = { row, col };\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  const createNode = (\n    row,\n    col,\n    isWall = false,\n    cumulativeWeight = null,\n    startNode = { row: START_NODE_ROW, col: START_NODE_COL },\n    finishNode = { row: FINISH_NODE_ROW, col: FINISH_NODE_COL }\n  ) => {\n    return {\n      row,\n      col,\n      isWall: isWall,\n      isStart: row === startNode.row && col === startNode.col,\n      isFinish: row === finishNode.row && col === finishNode.col,\n      isVisited: false,\n      distance: Infinity,\n      previousNode: null,\n      displayWeight: cumulativeWeight,\n      cumulativeWeight,\n      isShowWeight: false,\n    };\n  };\n\n  const [grid, setGrid] = useState(() => getInitialGrid());\n  const [isVisualising, setIsVisualising] = useState(false);\n  const [isPostVisualise, setIsPostVisualise] = useState(false);\n  const visitedNodeOrder = useRef([]);\n  const nodeRefArray = useRef([]);\n  const isResetting = useRef(false);\n  const isRandomWeights = useRef(false);\n  const timeOut = useRef([]);\n  const [isMousePressed, setIsMousePressed] = useState(false);\n  const [isStartFinishNode, setIsNewStartNode] = useState(false);\n  const [isNewFinishNode, setIsNewFinishNode] = useState(false);\n\n  const handleMouseDownForNode = (row, col) => {\n    setIsMousePressed(true);\n    if (\n      row === startNode.current.row &&\n      col === startNode.current.col &&\n      !isVisualising &&\n      !isPostVisualise\n    ) {\n      setIsNewStartNode(true);\n    } else if (\n      row === finishNode.current.row &&\n      col === finishNode.current.col &&\n      !isVisualising &&\n      !isPostVisualise\n    ) {\n      setIsNewFinishNode(true);\n    } else if (!isVisualising && !isPostVisualise) setWall(grid, row, col);\n  };\n\n  const handleMouseEnterForNode = (row, col) => {\n    if (!isMousePressed && !isVisualising) return;\n    if (\n      isStartFinishNode &&\n      !(row === finishNode.current.row && col === finishNode.current.col) //&&\n      //!grid[row][col].isWall\n    ) {\n      setNewStartOrFinishNode(grid, row, col);\n    } else if (\n      isNewFinishNode &&\n      !(row === startNode.current.row && col === startNode.current.col) //&&\n      //!grid[row][col].isWall\n    ) {\n      setNewStartOrFinishNode(grid, row, col);\n    } else if (!isVisualising && !isPostVisualise) setWall(grid, row, col);\n  };\n\n  //const handleTouchMoveForNode = (e) => {\n  //  if (!isMousePressed && !isVisualising) return;\n  //  const x = e.touches[0].clientX;\n  //  const y = e.touches[0].clientY;\n  //  const element = document.elementFromPoint(x, y);\n  //  const rowAndCol = element.id.split(\"-\");\n  //  const row = rowAndCol[0];\n  //  const col = rowAndCol[1];\n  //  handleMouseEnterForNode(row, col);\n  //};\n\n  const handleMouseUpForNode = () => {\n    setIsMousePressed(false);\n    setIsNewStartNode(false);\n    setIsNewFinishNode(false);\n  };\n\n  const handleMouseLeaveForGrid = () => {\n    handleMouseUpForNode();\n  };\n\n  const setWall = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const prevNodeValues = newGrid[row][col];\n    const wallNode = {\n      ...prevNodeValues,\n      isWall: !prevNodeValues.isWall,\n    };\n    newGrid[row][col] = wallNode;\n    setGrid(newGrid);\n  };\n\n  const setNewStartOrFinishNode = (grid, row, col) => {\n    const newGrid = grid.slice();\n    // keep the new start or finish nodes previous (json) values\n    const prevNodeValues = newGrid[row][col];\n    const currentStartFinishNode = isStartFinishNode\n      ? startNode.current\n      : finishNode.current;\n    // only change the type of the start or finish node\n    const type = isStartFinishNode ? \"isStart\" : \"isFinish\";\n    const newStartFinishNode = {\n      ...prevNodeValues,\n      isWall: prevNodeValues.isWall,\n      [type]: true,\n    };\n    const prevStartFinishNodeValues =\n      newGrid[currentStartFinishNode.row][currentStartFinishNode.col];\n    // change the old start or finish node type to false\n    const prevStartFinishNode = {\n      ...prevStartFinishNodeValues,\n      displayWeight:\n        prevStartFinishNodeValues.displayWeight === null &&\n        isRandomWeights.current\n          ? Math.ceil(Math.random() * 10)\n          : prevStartFinishNodeValues.displayWeight,\n      [type]: false,\n    };\n    newGrid[row][col] = newStartFinishNode;\n    newGrid[currentStartFinishNode.row][\n      currentStartFinishNode.col\n    ] = prevStartFinishNode;\n    // update start or finish node reference\n    if (isStartFinishNode) {\n      startNode.current = { row, col };\n    } else {\n      finishNode.current = { row, col };\n    }\n    setGrid(newGrid);\n  };\n\n  const animateDijkstra = (visitedNodeOrder, nodesInShortestPathOrder) => {\n    for (let i = 0; i <= visitedNodeOrder.length; i++) {\n      if (i === visitedNodeOrder.length) {\n        timeOut.current.push(\n          setTimeout(() => {\n            animateShortestPath(nodesInShortestPathOrder);\n          }, 5 * i)\n        );\n        return;\n      }\n      timeOut.current.push(\n        setTimeout(() => {\n          const node = visitedNodeOrder[i];\n          const nodeRef = nodeRefArray.current[`${node.row}-${node.col}`];\n          // displays cumulative weight if in random weight simulation\n          if (isRandomWeights.current)\n            nodeRef.innerText = `${node.cumulativeWeight}`;\n          nodeRef.className = \"node node-visited\";\n        }, 5 * i)\n      );\n    }\n  };\n\n  const animateShortestPath = (nodesInShortestPathOrder) => {\n    let delay = 0;\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      delay = i;\n      timeOut.current.push(\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          nodeRefArray.current[`${node.row}-${node.col}`].className =\n            \"node node-shortest-path\";\n        }, 50 * i)\n      );\n    }\n    timeOut.current.push(\n      setTimeout(() => {\n        setIsVisualising(false);\n        setIsPostVisualise(true);\n      }, 55 * delay)\n    );\n  };\n\n  const visualiseDijkstra = () => {\n    // resets css when resimulating\n    if (isPostVisualise) resetVisitedNodeCSS();\n    setIsVisualising(true);\n    const nodeStart = grid[startNode.current.row][startNode.current.col];\n    const nodeFinish = grid[finishNode.current.row][finishNode.current.col];\n    visitedNodeOrder.current = dijkstra(\n      grid,\n      nodeStart,\n      nodeFinish,\n      isRandomWeights.current\n    );\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(nodeFinish);\n    animateDijkstra(visitedNodeOrder.current, nodesInShortestPathOrder);\n  };\n\n  const resetGrid = () => {\n    isRandomWeights.current = false;\n    timeOut.current.forEach((timer) => {\n      clearTimeout(timer);\n    });\n    isResetting.current = true;\n    setIsVisualising(false);\n    setIsMousePressed(false);\n    setIsPostVisualise(false);\n    const initialGrid = getInitialGrid();\n    setGrid(initialGrid);\n    resetVisitedNodeCSS();\n  };\n\n  const resetVisitedNodeCSS = () => {\n    const nodeStart = isPostVisualise\n      ? startNode.current\n      : { row: START_NODE_ROW, col: START_NODE_COL };\n    const nodeFinish = isPostVisualise\n      ? finishNode.current\n      : { row: FINISH_NODE_ROW, col: FINISH_NODE_COL };\n    for (let i = 0; i < visitedNodeOrder.current.length; i++) {\n      const node = visitedNodeOrder.current[i];\n      const nodeRef = nodeRefArray.current[`${node.row}-${node.col}`];\n      if (node.row === nodeStart.row && node.col === nodeStart.col) {\n        nodeRef.innerText = \"\";\n        nodeRef.className = \"node node-start\";\n      } else if (node.row === nodeFinish.row && node.col === nodeFinish.col) {\n        nodeRef.innerText = \"\";\n        nodeRef.className = \"node node-finish\";\n      } else {\n        if ((isVisualising || isPostVisualise) && isRandomWeights.current) {\n          nodeRef.innerText = `${node.displayWeight}`;\n        } else {\n          nodeRef.innerText = \"\";\n        }\n        nodeRef.className = \"node\";\n      }\n    }\n  };\n\n  const restoreGrid = (isRestore = true) => {\n    timeOut.current.forEach((timer) => {\n      clearTimeout(timer);\n    });\n    setIsVisualising(false);\n    setIsMousePressed(false);\n    setIsPostVisualise(false);\n    resetVisitedNodeCSS();\n    randomWeights(grid, isRandomWeights.current, isRestore);\n  };\n\n  const randomWeights = (grid, isRandomWeightBool, isRestore = false) => {\n    isRandomWeights.current = isRandomWeightBool;\n    const newGrid = [];\n    const startNodeRow = startNode.current.row;\n    const startNodeCol = startNode.current.col;\n    const finishNodeRow = finishNode.current.row;\n    const finishNodeCol = finishNode.current.col;\n    for (let row = 0; row < NUM_ROWS; row++) {\n      const currentRow = [];\n      for (let col = 0; col < NUM_COLUMNS; col++) {\n        const nodeRef = nodeRefArray.current[`${row}-${col}`];\n        if (row === startNodeRow && col === startNodeCol) {\n          currentRow.push(\n            createNode(\n              startNodeRow,\n              startNodeCol,\n              false,\n              null,\n              { row: startNodeRow, col: startNodeCol },\n              { row: finishNodeRow, col: finishNodeCol }\n            )\n          );\n          nodeRef.innerText = \"\";\n          nodeRef.className = \"node node-start\";\n        } else if (row === finishNodeRow && col === finishNodeCol) {\n          currentRow.push(\n            createNode(\n              finishNodeRow,\n              finishNodeCol,\n              false,\n              null,\n              { row: startNodeRow, col: startNodeCol },\n              { row: finishNodeRow, col: finishNodeCol }\n            )\n          );\n          nodeRef.innerText = \"\";\n          nodeRef.className = \"node node-finish\";\n        } else {\n          currentRow.push(\n            createNode(\n              row,\n              col,\n              grid[row][col].isWall,\n              isRestore\n                ? grid[row][col].displayWeight\n                : Math.random() > 0.5\n                ? Math.ceil(Math.random() * 10)\n                : 1,\n              { row: startNodeRow, col: startNodeCol },\n              { row: finishNodeRow, col: finishNodeCol }\n            )\n          );\n          nodeRef.className = grid[row][col].isWall ? \"node node-wall\" : \"node\";\n        }\n      }\n      newGrid.push(currentRow);\n    }\n    setGrid(newGrid);\n  };\n\n  return (\n    <div className=\"App\">\n      <div\n        className=\"button-container\"\n        style={{\n          margin: \"3rem auto\",\n        }}\n      >\n        <Button type={\"reset\"} handleFunction={() => resetGrid()}></Button>\n        <Button\n          type={\"restore\"}\n          handleFunction={() => restoreGrid(grid)}\n          disable={!(isVisualising || isPostVisualise)}\n          disabledTitle={\"Restores state before the visualisation\"}\n        ></Button>\n        <Button\n          type={\"random-weights\"}\n          handleFunction={() => randomWeights(grid, true)}\n          disable={isVisualising || isPostVisualise}\n          title={\"Assigns random weights to each node\"}\n          disabledTitle={\"Can only reassign random weights on restore\"}\n        ></Button>\n        <Button\n          type={\"visualise\"}\n          handleFunction={() => visualiseDijkstra()}\n          disable={isVisualising}\n          isVisualising={isVisualising}\n          isPostVisualise={isPostVisualise}\n        ></Button>\n      </div>\n      <div\n        className=\"grid\"\n        onMouseLeave={() => handleMouseLeaveForGrid()}\n        style={{\n          margin: \"auto\",\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${NUM_COLUMNS}, ${NODE_REM}rem)`,\n          gridTemplateRows: `repeat(${NUM_ROWS}, ${NODE_REM}rem)`,\n          //makes the grid width relative to sum of all node pixels\n          width: `${NUM_COLUMNS * NODE_REM}rem`,\n          touchAction: \"none\",\n        }}\n      >\n        {grid.map((row) =>\n          row.map((node) => {\n            const {\n              row,\n              col,\n              isWall,\n              isStart,\n              isFinish,\n              isVisited,\n              displayWeight,\n              cumulativeWeight,\n              isShowWeight,\n            } = node;\n            return (\n              <Node\n                key={`${row}-${col}`}\n                ref={(el) => (nodeRefArray.current[`${row}-${col}`] = el)}\n                handleMouseDownForNode={(row, col) =>\n                  handleMouseDownForNode(row, col)\n                }\n                handleMouseEnterForNode={(row, col) =>\n                  handleMouseEnterForNode(row, col)\n                }\n                //handleTouchMoveForNode={(e) => handleTouchMoveForNode(e)}\n                handleMouseUpForNode={() => handleMouseUpForNode()}\n                row={row}\n                col={col}\n                isWall={isWall}\n                isStart={isStart}\n                isFinish={isFinish}\n                isVisited={isVisited}\n                displayWeight={displayWeight}\n                cumulativeWeight={cumulativeWeight}\n                isShowWeight={isShowWeight}\n              ></Node>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}