{"version":3,"sources":["components/Node.jsx","algorithms/dijkstra.js","App.js","reportWebVitals.js","index.js"],"names":["forwardRef","props","ref","row","col","isWall","isStart","isFinish","handleMouseDownForNode","handleMouseEnterForNode","handleMouseUpForNode","handleTouchMoveForNode","displayWeight","isShowWeight","extraClassName","id","onPointerDown","onPointerEnter","onPointerUp","onDragStart","e","preventDefault","stopPropagation","className","Infinity","dijkstra","grid","startNode","finishNode","isRandomWeights","isVisited","finishNodeNeighbours","getUnvisitedNeighbors","finishNodeNeighbourVisits","visitedNodes","distance","cumulativeWeight","unvisitedNodes","nodes","node","push","getAllNodes","heapSortNodesByDistance","closestNode","shift","length","finishNodeNeighbour","filter","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbor","distace","previousNode","neighbors","neighborOperations","totalRows","totalCols","i","operation","newRow","newCol","App","useRef","getInitialGrid","currentRow","createNode","current","useState","setGrid","isVisualising","setIsVisualising","isPostVisualise","setIsPostVisualise","visitedNodeOrder","nodeRefArray","isResetting","timeOut","isMousePressed","setIsMousePressed","isStartFinishNode","setIsNewStartNode","isNewFinishNode","setIsNewFinishNode","useEffect","setWall","newGrid","slice","prevNodeValues","wallNode","setNewStartOrFinishNode","currentStartFinishNode","type","newStartFinishNode","prevStartFinishNodeValues","prevStartFinishNode","animateShortestPath","nodesInShortestPathOrder","delay","setTimeout","visualiseDijkstra","resetVisitedNodeCSS","nodeStart","nodeFinish","currentNode","unshift","getNodesInShortestPathOrder","nodeRef","innerText","animateDijkstra","onClick","forEach","timer","clearTimeout","initialGrid","resetGrid","disabled","startNodeRow","startNodeCol","finishNodeRow","finishNodeCol","Math","random","ceil","randomWeights","onMouseLeave","style","margin","display","gridTemplateColumns","gridTemplateRows","width","NUM_COLUMNS","touchAction","map","el","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87aff949.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\nimport \"./Node.css\";\n\nexport default forwardRef((props, ref) => {\n  const {\n    row,\n    col,\n    isWall,\n    isStart,\n    isFinish,\n    handleMouseDownForNode,\n    handleMouseEnterForNode,\n    handleTouchMoveForNode,\n    handleMouseUpForNode,\n    displayWeight,\n    isShowWeight,\n  } = props;\n  const extraClassName = isFinish\n    ? \"node-finish\"\n    : isStart\n    ? \"node-start\"\n    : isWall\n    ? \"node-wall\"\n    : \"\";\n\n  return (\n    <div\n      id={`${row}-${col}`}\n      onPointerDown={() => {\n        handleMouseDownForNode(row, col);\n      }}\n      onPointerEnter={() => {\n        handleMouseEnterForNode(row, col);\n      }}\n      //onTouchMove={(e) => {\n      //  handleTouchMoveForNode(e);\n      //}}\n      onPointerUp={() => {\n        handleMouseUpForNode();\n      }}\n      onDragStart={(e) => {\n        // Block drag default event\n        e.preventDefault();\n        e.stopPropagation();\n      }}\n      ref={ref}\n      className={`node ${extraClassName}`}\n    >\n      {isStart\n        ? \"\"\n        : isFinish\n        ? \"\"\n        : displayWeight === Infinity\n        ? \"\"\n        : isShowWeight && !isWall\n        ? \"\"\n        : displayWeight}\n    </div>\n  );\n});\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode, isRandomWeights) {\n  finishNode.isVisited = false;\n  const finishNodeNeighbours = getUnvisitedNeighbors(finishNode, grid);\n  let finishNodeNeighbourVisits = 0;\n  const visitedNodes = [];\n  startNode.distance = 0;\n  startNode.cumulativeWeight = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  // terminates when finishNode is reached\n  while (true) {\n    heapSortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodes;\n    closestNode.isVisited = true;\n    visitedNodes.push(closestNode);\n    if (isRandomWeights && finishNodeNeighbours.length > 1) {\n      for (const finishNodeNeighbour of finishNodeNeighbours) {\n        const row = finishNodeNeighbour.row;\n        const col = finishNodeNeighbour.col;\n        if (\n          closestNode.row === row &&\n          closestNode.col === col &&\n          closestNode.isVisited\n        ) {\n          finishNodeNeighbourVisits++;\n        }\n      }\n      if (finishNodeNeighbourVisits === finishNodeNeighbours.length) {\n        finishNodeNeighbours.filter((node) => (node.isVisited = false));\n        return visitedNodes;\n      }\n    } else {\n      if (closestNode === finishNode) return visitedNodes;\n    }\n    updateUnvisitedNeighbors(closestNode, grid, isRandomWeights);\n  }\n}\n\nfunction heapSortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid, isRandomWeights) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    // for weighted simulation\n    if (isRandomWeights) {\n      if (neighbor.distace === Infinity) {\n        neighbor.distance = neighbor.displayWeight + node.cumulativeWeight;\n        neighbor.cumulativeWeight = neighbor.distance;\n        neighbor.previousNode = node;\n      }\n      // checks and updates the neighbors for the path with the less cost\n      else if (\n        neighbor.distance >\n        neighbor.displayWeight + node.cumulativeWeight\n      ) {\n        neighbor.distance = neighbor.displayWeight + node.cumulativeWeight;\n        neighbor.cumulativeWeight = neighbor.distance;\n        neighbor.previousNode = node;\n      }\n    }\n    // for unweighted simulation\n    else {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { row, col } = node;\n  const neighborOperations = [\n    [0, 1],\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n  ];\n  const totalRows = grid.length;\n  const totalCols = grid[0].length;\n  //constant opeations => 4 values\n  for (let i = 0; i < neighborOperations.length; i++) {\n    const operation = neighborOperations[i];\n    const x = operation[0];\n    const y = operation[1];\n    const newRow = row + x;\n    const newCol = col - y;\n    if (\n      newRow >= 0 &&\n      newRow < totalRows &&\n      newCol >= 0 &&\n      newCol < totalCols &&\n      !grid[newRow][newCol].isWall\n    ) {\n      neighbors.push(grid[newRow][newCol]);\n    }\n  }\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Node from \"./components/Node.jsx\";\nimport {\n  getNodesInShortestPathOrder,\n  dijkstra,\n} from \"./algorithms/dijkstra.js\";\nimport \"./App.css\";\n\nconst NUM_ROWS = 20;\nconst NUM_COLUMNS = 50;\nconst NODE_PIXEL = 25;\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nconst App = () => {\n  const startNode = useRef();\n  const finishNode = useRef();\n\n  const getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < NUM_ROWS; row++) {\n      const currentRow = [];\n      for (let col = 0; col < NUM_COLUMNS; col++) {\n        currentRow.push(createNode(row, col));\n        if (row === START_NODE_ROW && col === START_NODE_COL)\n          startNode.current = { row, col };\n        if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL)\n          finishNode.current = { row, col };\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  const createNode = (\n    row,\n    col,\n    isWall = false,\n    cumulativeWeight = null,\n    startNode = { row: START_NODE_ROW, col: START_NODE_COL },\n    finishNode = { row: FINISH_NODE_ROW, col: FINISH_NODE_COL }\n  ) => {\n    return {\n      row,\n      col,\n      isWall: isWall,\n      isStart: row === startNode.row && col === startNode.col,\n      isFinish: row === finishNode.row && col === finishNode.col,\n      isVisited: false,\n      distance: Infinity,\n      previousNode: null,\n      displayWeight: cumulativeWeight,\n      cumulativeWeight,\n      isShowWeight: false,\n    };\n  };\n\n  const [grid, setGrid] = useState(() => getInitialGrid());\n  const [isVisualising, setIsVisualising] = useState(false);\n  const [isPostVisualise, setIsPostVisualise] = useState(false);\n  const visitedNodeOrder = useRef([]);\n  const nodeRefArray = useRef([]);\n  const isResetting = useRef(false);\n  const isRandomWeights = useRef(false);\n  const timeOut = useRef([]);\n  const [isMousePressed, setIsMousePressed] = useState(false);\n  const [isStartFinishNode, setIsNewStartNode] = useState(false);\n  const [isNewFinishNode, setIsNewFinishNode] = useState(false);\n\n  useEffect(() => {}, []);\n\n  const handleMouseDownForNode = (row, col) => {\n    setIsMousePressed(true);\n    if (\n      row === startNode.current.row &&\n      col === startNode.current.col &&\n      !isVisualising &&\n      !isPostVisualise\n    ) {\n      setIsNewStartNode(true);\n    } else if (\n      row === finishNode.current.row &&\n      col === finishNode.current.col &&\n      !isVisualising &&\n      !isPostVisualise\n    ) {\n      setIsNewFinishNode(true);\n    } else if (!isVisualising && !isPostVisualise) setWall(grid, row, col);\n  };\n\n  const handleMouseEnterForNode = (row, col) => {\n    if (!isMousePressed && !isVisualising) return;\n    if (\n      isStartFinishNode &&\n      !(row === finishNode.current.row && col === finishNode.current.col) &&\n      !grid[row][col].isWall\n    ) {\n      setNewStartOrFinishNode(grid, row, col);\n    } else if (\n      isNewFinishNode &&\n      !(row === startNode.current.row && col === startNode.current.col) &&\n      !grid[row][col].isWall\n    ) {\n      setNewStartOrFinishNode(grid, row, col);\n    } else if (!isVisualising && !isPostVisualise) setWall(grid, row, col);\n  };\n\n  //const handleTouchMoveForNode = (e) => {\n  //  if (!isMousePressed && !isVisualising) return;\n  //  const x = e.touches[0].clientX;\n  //  const y = e.touches[0].clientY;\n  //  const element = document.elementFromPoint(x, y);\n  //  const rowAndCol = element.id.split(\"-\");\n  //  const row = rowAndCol[0];\n  //  const col = rowAndCol[1];\n  //  handleMouseEnterForNode(row, col);\n  //};\n\n  const handleMouseUpForNode = () => {\n    setIsMousePressed(false);\n    setIsNewStartNode(false);\n    setIsNewFinishNode(false);\n  };\n\n  const handleMouseLeaveForGrid = () => {\n    handleMouseUpForNode();\n  };\n\n  const setWall = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const prevNodeValues = newGrid[row][col];\n    const wallNode = {\n      ...prevNodeValues,\n      isWall: !prevNodeValues.isWall,\n    };\n    newGrid[row][col] = wallNode;\n    setGrid(newGrid);\n  };\n\n  const setNewStartOrFinishNode = (grid, row, col) => {\n    const newGrid = grid.slice();\n    // keep the new start or finish nodes previous (json) values\n    const prevNodeValues = newGrid[row][col];\n    const currentStartFinishNode = isStartFinishNode\n      ? startNode.current\n      : finishNode.current;\n    // only change the type of the start or finish node\n    const type = isStartFinishNode ? \"isStart\" : \"isFinish\";\n    const newStartFinishNode = {\n      ...prevNodeValues,\n      [type]: true,\n    };\n    const prevStartFinishNodeValues =\n      newGrid[currentStartFinishNode.row][currentStartFinishNode.col];\n    // change the old start or finish node type to false\n    const prevStartFinishNode = {\n      ...prevStartFinishNodeValues,\n      [type]: false,\n    };\n    newGrid[row][col] = newStartFinishNode;\n    newGrid[currentStartFinishNode.row][\n      currentStartFinishNode.col\n    ] = prevStartFinishNode;\n    // update start or finish node reference\n    if (isStartFinishNode) {\n      startNode.current = { row, col };\n    } else {\n      finishNode.current = { row, col };\n    }\n    setGrid(newGrid);\n  };\n\n  const animateDijkstra = (visitedNodeOrder, nodesInShortestPathOrder) => {\n    for (let i = 0; i <= visitedNodeOrder.length; i++) {\n      if (i === visitedNodeOrder.length) {\n        timeOut.current.push(\n          setTimeout(() => {\n            animateShortestPath(nodesInShortestPathOrder);\n          }, 5 * i)\n        );\n        return;\n      }\n      timeOut.current.push(\n        setTimeout(() => {\n          const node = visitedNodeOrder[i];\n          const nodeRef = nodeRefArray.current[`${node.row}-${node.col}`];\n          // displays cumulative weight if in random weight simulation\n          if (isRandomWeights.current)\n            nodeRef.innerText = `${node.cumulativeWeight}`;\n          nodeRef.className = \"node node-visited\";\n        }, 5 * i)\n      );\n    }\n  };\n\n  const animateShortestPath = (nodesInShortestPathOrder) => {\n    let delay = 0;\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      delay = i;\n      timeOut.current.push(\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          nodeRefArray.current[`${node.row}-${node.col}`].className =\n            \"node node-shortest-path\";\n        }, 50 * i)\n      );\n    }\n    timeOut.current.push(setTimeout(() => setIsVisualising(false), 50 * delay));\n    setIsPostVisualise(true);\n  };\n\n  const visualiseDijkstra = () => {\n    // resets css when resimulating\n    if (isPostVisualise) resetVisitedNodeCSS();\n    setIsVisualising(true);\n    const nodeStart = grid[startNode.current.row][startNode.current.col];\n    const nodeFinish = grid[finishNode.current.row][finishNode.current.col];\n    visitedNodeOrder.current = dijkstra(\n      grid,\n      nodeStart,\n      nodeFinish,\n      isRandomWeights.current\n    );\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(nodeFinish);\n    animateDijkstra(visitedNodeOrder.current, nodesInShortestPathOrder);\n  };\n\n  const resetGrid = () => {\n    isRandomWeights.current = false;\n    timeOut.current.forEach((timer) => {\n      clearTimeout(timer);\n    });\n    isResetting.current = true;\n    setIsVisualising(false);\n    setIsMousePressed(false);\n    setIsPostVisualise(false);\n    const initialGrid = getInitialGrid();\n    setGrid(initialGrid);\n    resetVisitedNodeCSS();\n  };\n\n  const resetVisitedNodeCSS = () => {\n    const nodeStart = isPostVisualise\n      ? startNode.current\n      : { row: START_NODE_ROW, col: START_NODE_COL };\n    const nodeFinish = isPostVisualise\n      ? finishNode.current\n      : { row: FINISH_NODE_ROW, col: FINISH_NODE_COL };\n    for (let i = 0; i < visitedNodeOrder.current.length; i++) {\n      const node = visitedNodeOrder.current[i];\n      const nodeRef = nodeRefArray.current[`${node.row}-${node.col}`];\n      if (node.row === nodeStart.row && node.col === nodeStart.col) {\n        nodeRef.innerText = \"\";\n        nodeRef.className = \"node node-start\";\n      } else if (node.row === nodeFinish.row && node.col === nodeFinish.col) {\n        nodeRef.innerText = \"\";\n        nodeRef.className = \"node node-finish\";\n      } else {\n        if (isPostVisualise && isRandomWeights.current) {\n          nodeRef.innerText = `${node.displayWeight}`;\n        } else {\n          nodeRef.innerText = \"\";\n        }\n        nodeRef.className = \"node\";\n      }\n    }\n  };\n\n  const randomWeights = (grid) => {\n    isRandomWeights.current = true;\n    const newGrid = [];\n    const startNodeRow = startNode.current.row;\n    const startNodeCol = startNode.current.col;\n    const finishNodeRow = finishNode.current.row;\n    const finishNodeCol = finishNode.current.col;\n    for (let row = 0; row < NUM_ROWS; row++) {\n      const currentRow = [];\n      for (let col = 0; col < NUM_COLUMNS; col++) {\n        const nodeRef = nodeRefArray.current[`${row}-${col}`];\n        if (row === startNodeRow && col === startNodeCol) {\n          currentRow.push(\n            createNode(\n              startNodeRow,\n              startNodeCol,\n              false,\n              null,\n              { row: startNodeRow, col: startNodeCol },\n              { row: finishNodeRow, col: finishNodeCol }\n            )\n          );\n          nodeRef.className = \"node node-start\";\n        } else if (row === finishNodeRow && col === finishNodeCol) {\n          currentRow.push(\n            createNode(\n              finishNodeRow,\n              finishNodeCol,\n              false,\n              null,\n              { row: startNodeRow, col: startNodeCol },\n              { row: finishNodeRow, col: finishNodeCol }\n            )\n          );\n          nodeRef.className = \"node node-finish\";\n        } else {\n          currentRow.push(\n            createNode(\n              row,\n              col,\n              grid[row][col].isWall,\n              Math.random() > 0.5 ? Math.ceil(Math.random() * 10) : 1,\n              { row: startNodeRow, col: startNodeCol },\n              { row: finishNodeRow, col: finishNodeCol }\n            )\n          );\n          nodeRef.className = grid[row][col].isWall ? \"node node-wall\" : \"node\";\n        }\n      }\n      newGrid.push(currentRow);\n    }\n    setGrid(newGrid);\n  };\n\n  return (\n    <div className=\"App\">\n      <button onClick={() => resetGrid()}>Reset</button>\n      <button\n        disabled={isVisualising || isPostVisualise}\n        onClick={() => randomWeights(grid)}\n      >\n        Random Weights\n      </button>\n      <button disabled={isVisualising} onClick={() => visualiseDijkstra()}>\n        Visualise Dijkstra's Algorithm\n      </button>\n      <div\n        className=\"grid\"\n        onMouseLeave={() => handleMouseLeaveForGrid()}\n        style={{\n          margin: \"100px auto\",\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${NUM_COLUMNS}, ${NODE_PIXEL}px)`,\n          gridTemplateRows: `repeat(${NUM_ROWS}, ${NODE_PIXEL}px)`,\n          //makes the grid width relative to sum of all node pixels\n          width: `${NUM_COLUMNS * NODE_PIXEL}px`,\n          touchAction: \"none\",\n        }}\n      >\n        {grid.map((row) =>\n          row.map((node) => {\n            const {\n              row,\n              col,\n              isWall,\n              isStart,\n              isFinish,\n              isVisited,\n              displayWeight,\n              cumulativeWeight,\n              isShowWeight,\n            } = node;\n            return (\n              <Node\n                key={`${row}-${col}`}\n                ref={(el) => (nodeRefArray.current[`${row}-${col}`] = el)}\n                handleMouseDownForNode={(row, col) =>\n                  handleMouseDownForNode(row, col)\n                }\n                handleMouseEnterForNode={(row, col) =>\n                  handleMouseEnterForNode(row, col)\n                }\n                //handleTouchMoveForNode={(e) => handleTouchMoveForNode(e)}\n                handleMouseUpForNode={() => handleMouseUpForNode()}\n                row={row}\n                col={col}\n                isWall={isWall}\n                isStart={isStart}\n                isFinish={isFinish}\n                isVisited={isVisited}\n                displayWeight={displayWeight}\n                cumulativeWeight={cumulativeWeight}\n                isShowWeight={isShowWeight}\n              ></Node>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}