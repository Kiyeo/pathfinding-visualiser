{"version":3,"sources":["components/Node.jsx","algorithms/dijkstra.js","App.js","reportWebVitals.js","index.js"],"names":["forwardRef","props","ref","row","col","isStart","isFinish","handleMouseDown","handleMouseEnter","handleMouseUp","extraClassName","onMouseDown","onMouseEnter","onMouseUp","onDragStart","e","preventDefault","stopPropagation","className","dijkstra","grid","startNode","finishNode","visitedNodes","distance","unvisitedNodes","nodes","node","push","getAllNodes","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","length","filter","neighbor","getUnvisitedNeighbors","previousNode","App","useRef","getInitialGrid","currentRow","createNode","current","useState","setGrid","isVisualising","setIsVisualising","visitedNodeOrder","nodeRefArray","isMousePressed","setIsMousePressed","isNewStartNode","setIsNewStartNode","isNewFinishNode","setIsNewFinishNode","isPostVisualise","setIsPostVisualise","useEffect","getNewStartNode","newGrid","slice","prevNode","newStartNode","prevStartNode","rmPrevStartNode","animateShortestPath","nodesInShortestPathOrder","delay","i","setTimeout","visualiseDijkstra","resetVisitedNodeCSS","nodeStart","nodeFinish","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","disabled","onClick","initialGrid","resetGrid","onMouseLeave","style","margin","display","gridTemplateColumns","width","NUM_COLUMNS","map","el","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6dd99b7d.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\nimport \"./Node.css\";\n\nexport default forwardRef((props, ref) => {\n  const {\n    row,\n    col,\n    isStart,\n    isFinish,\n    handleMouseDown,\n    handleMouseEnter,\n    handleMouseUp,\n  } = props;\n  const extraClassName = isFinish ? \"node-finish\" : isStart ? \"node-start\" : \"\";\n\n  return (\n    <div\n      onMouseDown={() => {\n        handleMouseDown(row, col);\n      }}\n      onMouseEnter={() => {\n        handleMouseEnter(row, col);\n      }}\n      onMouseUp={() => {\n        handleMouseUp();\n      }}\n      onDragStart={(e) => {\n        e.preventDefault();\n        e.stopPropagation();\n      }}\n      ref={ref}\n      className={`node ${extraClassName}`}\n    ></div>\n  );\n});\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodes = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (true) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodes;\n    closestNode.isVisited = true;\n    visitedNodes.push(closestNode);\n    if (closestNode === finishNode) return visitedNodes;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Node from \"./components/Node.jsx\";\nimport {\n  getNodesInShortestPathOrder,\n  dijkstra,\n} from \"./algorithms/dijkstra.js\";\nimport \"./App.css\";\n\nconst NUM_ROWS = 20;\nconst NUM_COLUMNS = 50;\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nconst App = () => {\n  const startNode = useRef();\n  const finishNode = useRef();\n\n  const getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < NUM_ROWS; row++) {\n      const currentRow = [];\n      for (let col = 0; col < NUM_COLUMNS; col++) {\n        currentRow.push(createNode(row, col));\n        if (row === START_NODE_ROW && col === START_NODE_COL)\n          startNode.current = { row, col };\n        if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL)\n          finishNode.current = { row, col };\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  const createNode = (row, col) => {\n    return {\n      row,\n      col,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      isVisited: false,\n      distance: Infinity,\n      previousNode: null,\n    };\n  };\n\n  const [grid, setGrid] = useState(() => getInitialGrid());\n  const [isVisualising, setIsVisualising] = useState(false);\n  const visitedNodeOrder = useRef([]);\n  const nodeRefArray = useRef([]);\n  const [isMousePressed, setIsMousePressed] = useState(false);\n  const [isNewStartNode, setIsNewStartNode] = useState(false);\n  const [isNewFinishNode, setIsNewFinishNode] = useState(false);\n  const [isPostVisualise, setIsPostVisualise] = useState(false);\n\n  useEffect(() => {}, []);\n\n  const handleMouseDown = (row, col) => {\n    setIsMousePressed(true);\n    if (\n      row === startNode.current.row &&\n      col === startNode.current.col &&\n      !isVisualising &&\n      !isPostVisualise\n    ) {\n      setIsNewStartNode(true);\n    }\n    if (\n      row === finishNode.current.row &&\n      col === finishNode.current.col &&\n      !isVisualising &&\n      !isPostVisualise\n    ) {\n      setIsNewFinishNode(true);\n    }\n  };\n\n  const handleMouseEnter = (row, col) => {\n    if (!isMousePressed && !isVisualising) return;\n    if (\n      isNewStartNode &&\n      !(row === finishNode.current.row && col === finishNode.current.col)\n    ) {\n      const newGrid = getNewStartNode(grid, row, col);\n      setGrid(newGrid);\n    }\n    if (\n      isNewFinishNode &&\n      !(row === startNode.current.row && col === startNode.current.col)\n    ) {\n      const newGrid = getNewStartNode(grid, row, col);\n      setGrid(newGrid);\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsMousePressed(false);\n    setIsNewStartNode(false);\n    setIsNewFinishNode(false);\n  };\n\n  const handleMouseLeave = () => {\n    setIsMousePressed(false);\n    setIsNewStartNode(false);\n    setIsNewFinishNode(false);\n  };\n\n  const getNewStartNode = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const prevNode = newGrid[row][col];\n    if (isNewStartNode) {\n      const newStartNode = {\n        ...prevNode,\n        isStart: true,\n      };\n      const prevStartNode =\n        newGrid[startNode.current.row][startNode.current.col];\n      const rmPrevStartNode = {\n        ...prevStartNode,\n        isStart: false,\n      };\n      newGrid[row][col] = newStartNode;\n      newGrid[startNode.current.row][startNode.current.col] = rmPrevStartNode;\n      startNode.current = { row, col };\n      return newGrid;\n    } else {\n      const newStartNode = {\n        ...prevNode,\n        isFinish: true,\n      };\n      const prevStartNode =\n        newGrid[finishNode.current.row][finishNode.current.col];\n      const rmPrevStartNode = {\n        ...prevStartNode,\n        isFinish: false,\n      };\n      newGrid[row][col] = newStartNode;\n      newGrid[finishNode.current.row][finishNode.current.col] = rmPrevStartNode;\n      finishNode.current = { row, col };\n      return newGrid;\n    }\n  };\n\n  const animateDijkstra = (visitedNodeOrder, nodesInShortestPathOrder) => {\n    for (let i = 0; i <= visitedNodeOrder.length; i++) {\n      if (i === visitedNodeOrder.length) {\n        setTimeout(() => {\n          animateShortestPath(nodesInShortestPathOrder);\n        }, 5 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodeOrder[i];\n        nodeRefArray.current[`${node.row}-${node.col}`].className =\n          \"node node-visited\";\n      }, 5 * i);\n    }\n  };\n\n  const animateShortestPath = (nodesInShortestPathOrder) => {\n    let delay = 0;\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      delay = i;\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        nodeRefArray.current[`${node.row}-${node.col}`].className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n    setTimeout(() => setIsVisualising(false), 50 * delay);\n    setIsPostVisualise(true);\n  };\n\n  const visualiseDijkstra = () => {\n    // disable if already visualising the algorithm\n    //resetGrid();\n    if (isPostVisualise) resetVisitedNodeCSS();\n    setIsVisualising(true);\n    const nodeStart = grid[startNode.current.row][startNode.current.col];\n    const nodeFinish = grid[finishNode.current.row][finishNode.current.col];\n    visitedNodeOrder.current = dijkstra(grid, nodeStart, nodeFinish);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(nodeFinish);\n    animateDijkstra(visitedNodeOrder.current, nodesInShortestPathOrder);\n  };\n\n  const resetGrid = () => {\n    setIsVisualising(false);\n    setIsMousePressed(false);\n    setIsPostVisualise(false);\n    const initialGrid = getInitialGrid();\n    setGrid(initialGrid);\n    resetVisitedNodeCSS();\n  };\n\n  const resetVisitedNodeCSS = () => {\n    const nodeStart = isPostVisualise\n      ? startNode.current\n      : { row: START_NODE_ROW, col: START_NODE_COL };\n    const nodeFinish = isPostVisualise\n      ? finishNode.current\n      : { row: FINISH_NODE_ROW, col: FINISH_NODE_COL };\n    for (let i = 0; i < visitedNodeOrder.current.length; i++) {\n      const node = visitedNodeOrder.current[i];\n      if (node.row === nodeStart.row && node.col === nodeStart.col) {\n        nodeRefArray.current[`${node.row}-${node.col}`].className =\n          \"node node-start\";\n      } else if (node.row === nodeFinish.row && node.col === nodeFinish.col) {\n        nodeRefArray.current[`${node.row}-${node.col}`].className =\n          \"node node-finish\";\n      } else {\n        nodeRefArray.current[`${node.row}-${node.col}`].className = \"node\";\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <button disabled={isVisualising} onClick={() => resetGrid()}>\n        Reset\n      </button>\n      <button disabled={isVisualising} onClick={() => visualiseDijkstra()}>\n        Visualise Dijkstra's Algorithm\n      </button>\n      <div\n        className=\"grid\"\n        onMouseLeave={() => handleMouseLeave()}\n        style={{\n          margin: \"100px auto\",\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${NUM_COLUMNS}, 25px)`,\n          //makes the grid width relative to node dimension\n          width: `${NUM_COLUMNS * 25}px`,\n        }}\n      >\n        {grid.map((row) =>\n          row.map((node) => {\n            const { row, col, isStart, isFinish, isVisited } = node;\n            return (\n              <Node\n                key={`${row}-${col}`}\n                ref={(el) => (nodeRefArray.current[`${row}-${col}`] = el)}\n                handleMouseDown={(row, col) => handleMouseDown(row, col)}\n                handleMouseEnter={(row, col) => handleMouseEnter(row, col)}\n                handleMouseUp={() => handleMouseUp()}\n                row={row}\n                col={col}\n                isStart={isStart}\n                isFinish={isFinish}\n                isVisited={isVisited}\n              ></Node>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}