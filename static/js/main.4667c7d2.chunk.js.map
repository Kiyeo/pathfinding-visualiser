{"version":3,"sources":["components/Node.jsx","algorithms/dijkstra.js","App.js","reportWebVitals.js","index.js"],"names":["forwardRef","props","ref","row","col","isStart","isFinish","handleMouseDown","handleMouseEnter","handleMouseUp","extraClassName","draggable","onMouseDown","onMouseEnter","onMouseUp","onDragStart","className","dijkstra","grid","startNode","finishNode","visitedNodes","distance","unvisitedNodes","nodes","node","push","getAllNodes","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","length","filter","neighbor","getUnvisitedNeighbors","previousNode","App","useRef","getInitialGrid","currentRow","createNode","current","useState","setGrid","isVisualising","setIsVisualising","visitedNodeOrder","nodeRefArray","isMousePressed","isNewStartNode","setIsNewStartNode","isNewFinishNode","setIsNewFinishNode","useEffect","getNewStartNode","newGrid","slice","prevNode","newStartNode","prevStartNode","rmPrevStartNode","animateShortestPath","nodesInShortestPathOrder","delay","i","setTimeout","visualiseDijkstra","nodeStart","nodeFinish","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","disabled","onClick","initialGrid","resetGrid","map","rowId","el","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4667c7d2.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\nimport \"./Node.css\";\n\nexport default forwardRef((props, ref) => {\n  const {\n    row,\n    col,\n    isStart,\n    isFinish,\n    handleMouseDown,\n    handleMouseEnter,\n    handleMouseUp,\n  } = props;\n  const extraClassName = isFinish ? \"node-finish\" : isStart ? \"node-start\" : \"\";\n\n  return (\n    <div\n      draggable={false}\n      onMouseDown={() => {\n        handleMouseDown(row, col);\n      }}\n      onMouseEnter={() => {\n        handleMouseEnter(row, col);\n      }}\n      onMouseUp={() => {\n        handleMouseUp();\n      }}\n      onDragStart={() => false}\n      ref={ref}\n      className={`node ${extraClassName}`}\n    ></div>\n  );\n});\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodes = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (true) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodes;\n    closestNode.isVisited = true;\n    visitedNodes.push(closestNode);\n    if (closestNode === finishNode) return visitedNodes;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Node from \"./components/Node.jsx\";\nimport {\n  getNodesInShortestPathOrder,\n  dijkstra,\n} from \"./algorithms/dijkstra.js\";\nimport \"./App.css\";\n\nconst NUM_ROWS = 20;\nconst NUM_COLUMNS = 50;\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nconst App = () => {\n  const startNode = useRef();\n  const finishNode = useRef();\n\n  const getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < NUM_ROWS; row++) {\n      const currentRow = [];\n      for (let col = 0; col < NUM_COLUMNS; col++) {\n        currentRow.push(createNode(row, col));\n        if (row === START_NODE_ROW && col === START_NODE_COL)\n          startNode.current = { row, col };\n        if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL)\n          finishNode.current = { row, col };\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  };\n\n  const createNode = (row, col) => {\n    return {\n      row,\n      col,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      isVisited: false,\n      distance: Infinity,\n      previousNode: null,\n    };\n  };\n\n  const [grid, setGrid] = useState(() => getInitialGrid());\n  const [isVisualising, setIsVisualising] = useState(false);\n  const visitedNodeOrder = useRef([]);\n  const nodeRefArray = useRef([]);\n  const isMousePressed = useRef(false);\n  const [isNewStartNode, setIsNewStartNode] = useState(false);\n  const [isNewFinishNode, setIsNewFinishNode] = useState(false);\n\n  useEffect(() => {}, []);\n\n  const handleMouseDown = (row, col) => {\n    isMousePressed.current = true;\n    if (\n      row === startNode.current.row &&\n      col === startNode.current.col &&\n      !isVisualising\n    ) {\n      setIsNewStartNode(true);\n    }\n    if (\n      row === finishNode.current.row &&\n      col === finishNode.current.col &&\n      !isVisualising\n    ) {\n      setIsNewFinishNode(true);\n    }\n  };\n\n  const handleMouseEnter = (row, col) => {\n    if (!isMousePressed.current && !isVisualising) return;\n    if (\n      isNewStartNode &&\n      !(row === finishNode.current.row && col === finishNode.current.col)\n    ) {\n      const newGrid = getNewStartNode(grid, row, col);\n      setGrid(newGrid);\n    }\n    if (\n      isNewFinishNode &&\n      !(row === startNode.current.row && col === startNode.current.col)\n    ) {\n      const newGrid = getNewStartNode(grid, row, col);\n      setGrid(newGrid);\n    }\n  };\n\n  const handleMouseUp = () => {\n    isMousePressed.current = false;\n    setIsNewStartNode(false);\n    setIsNewFinishNode(false);\n  };\n\n  const getNewStartNode = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const prevNode = newGrid[row][col];\n    if (isNewStartNode) {\n      const newStartNode = {\n        ...prevNode,\n        isStart: true,\n      };\n      const prevStartNode =\n        newGrid[startNode.current.row][startNode.current.col];\n      const rmPrevStartNode = {\n        ...prevStartNode,\n        isStart: false,\n      };\n      newGrid[row][col] = newStartNode;\n      newGrid[startNode.current.row][startNode.current.col] = rmPrevStartNode;\n      startNode.current = { row, col };\n      return newGrid;\n    } else {\n      const newStartNode = {\n        ...prevNode,\n        isFinish: true,\n      };\n      const prevStartNode =\n        newGrid[finishNode.current.row][finishNode.current.col];\n      const rmPrevStartNode = {\n        ...prevStartNode,\n        isFinish: false,\n      };\n      newGrid[row][col] = newStartNode;\n      newGrid[finishNode.current.row][finishNode.current.col] = rmPrevStartNode;\n      finishNode.current = { row, col };\n      return newGrid;\n    }\n  };\n\n  const animateDijkstra = (visitedNodeOrder, nodesInShortestPathOrder) => {\n    for (let i = 0; i <= visitedNodeOrder.length; i++) {\n      if (i === visitedNodeOrder.length) {\n        setTimeout(() => {\n          animateShortestPath(nodesInShortestPathOrder);\n        }, 5 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodeOrder[i];\n        nodeRefArray.current[`${node.row}-${node.col}`].className =\n          \"node node-visited\";\n      }, 5 * i);\n    }\n  };\n\n  const animateShortestPath = (nodesInShortestPathOrder) => {\n    let delay = 0;\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      delay = i;\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        nodeRefArray.current[`${node.row}-${node.col}`].className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n    setTimeout(() => setIsVisualising(false), 50 * delay);\n  };\n\n  const visualiseDijkstra = () => {\n    // disable if already visualising the algorithm\n    //resetGrid();\n    setIsVisualising(true);\n    const nodeStart = grid[startNode.current.row][startNode.current.col];\n    const nodeFinish = grid[finishNode.current.row][finishNode.current.col];\n    visitedNodeOrder.current = dijkstra(grid, nodeStart, nodeFinish);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(nodeFinish);\n    animateDijkstra(visitedNodeOrder.current, nodesInShortestPathOrder);\n  };\n\n  const resetGrid = () => {\n    setIsVisualising(false);\n    isMousePressed.current = false;\n    const initialGrid = getInitialGrid();\n    setGrid(initialGrid);\n    for (let i = 0; i < visitedNodeOrder.current.length; i++) {\n      const node = visitedNodeOrder.current[i];\n      if (node.row === START_NODE_ROW && node.col === START_NODE_COL) {\n        nodeRefArray.current[`${node.row}-${node.col}`].className =\n          \"node node-start\";\n      } else if (node.row === FINISH_NODE_ROW && node.col === FINISH_NODE_COL) {\n        nodeRefArray.current[`${node.row}-${node.col}`].className =\n          \"node node-finish\";\n      } else {\n        nodeRefArray.current[`${node.row}-${node.col}`].className = \"node\";\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <button disabled={isVisualising} onClick={() => resetGrid()}>\n        Reset\n      </button>\n      <button disabled={isVisualising} onClick={() => visualiseDijkstra()}>\n        Visualise Dijkstra's Algorithm\n      </button>\n      <div className=\"grid\">\n        {grid.map((row, rowId) => {\n          return (\n            <div key={rowId}>\n              {row.map((node) => {\n                const { row, col, isStart, isFinish, isVisited } = node;\n                return (\n                  <Node\n                    key={`${row}-${col}`}\n                    ref={(el) => (nodeRefArray.current[`${row}-${col}`] = el)}\n                    handleMouseDown={(row, col) => handleMouseDown(row, col)}\n                    handleMouseEnter={(row, col) => handleMouseEnter(row, col)}\n                    handleMouseUp={() => handleMouseUp()}\n                    row={row}\n                    col={col}\n                    isStart={isStart}\n                    isFinish={isFinish}\n                    isVisited={isVisited}\n                  ></Node>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}