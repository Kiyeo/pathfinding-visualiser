{"version":3,"sources":["pathfinding/Node/Node.jsx","algorithms/dijkstra.js","pathfinding/grid.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","props","row","col","isStart","extraClassName","isFinish","id","className","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","Grid","useState","setGrid","useRef","useEffect","currentRow","createNode","animateShortestPath","nodesInShortestPathOrder","i","setTimeout","document","getElementById","visualiseDijkstra","animateDijkstra","currentNode","unshift","getNodesInShortestPathOrder","onClick","map","rowId","nodeId","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c0d7db04.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Node.css\";\n\nexport default function Node(props) {\n  const { row, col, isStart, isFinish } = props;\n  const extraClassName = isFinish ? \"node-finish\" : isStart ? \"node-start\" : \"\";\n  return (\n    <div id={`node-${row}-${col}`} className={`node ${extraClassName}`}></div>\n  );\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Node from \"./Node/Node.jsx\";\nimport {\n  getNodesInShortestPathOrder,\n  dijkstra,\n} from \"../algorithms/dijkstra.js\";\n\nimport \"./grid.css\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default function Grid() {\n  const [grid, setGrid] = useState([]);\n  const nodeRef = useRef(null);\n\n  useEffect(() => {\n    const grid = [];\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 50; col++) {\n        currentRow.push(createNode(row, col));\n      }\n      grid.push(currentRow);\n    }\n    setGrid(grid);\n  }, []);\n\n  const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 10 * i);\n    }\n  };\n\n  const animateShortestPath = (nodesInShortestPathOrder) => {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  };\n\n  const visualiseDijkstra = () => {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodeOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    animateDijkstra(visitedNodeOrder, nodesInShortestPathOrder);\n  };\n\n  const createNode = (row, col) => {\n    return {\n      row,\n      col,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      isVisited: false,\n      distance: Infinity,\n      previousNode: null,\n    };\n  };\n\n  return (\n    <>\n      <button onClick={() => visualiseDijkstra()}>\n        Visualize Dijkstra's Algorithm\n      </button>\n      <div className=\"grid\">\n        {grid.map((row, rowId) => {\n          return (\n            <div key={rowId}>\n              {row.map((node, nodeId) => {\n                const { row, col, isStart, isFinish } = node;\n                return (\n                  <Node\n                    key={nodeId}\n                    row={row}\n                    col={col}\n                    isStart={isStart}\n                    isFinish={isFinish}\n                  ></Node>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Grid from \"./pathfinding/grid.jsx\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid></Grid>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}