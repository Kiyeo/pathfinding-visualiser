{"version":3,"sources":["components/Node.jsx","components/Button.jsx","algorithms/dijkstra.js","App.js","reportWebVitals.js","index.js"],"names":["forwardRef","props","ref","row","col","isWall","isStart","isFinish","handlePointerDownForNode","handlePointerEnterForNode","handleTouchMoveForNode","handlePointerUpForNode","displayWeight","isShowWeight","extraClassName","id","onPointerDown","onMouseEnter","onTouchMove","e","onPointerUp","onDragStart","preventDefault","stopPropagation","className","Infinity","Button","type","handleFunction","disable","title","disabledTitle","isVisualising","isPostVisualise","text","replace","match","toUpperCase","displayText","displayTitle","shape","disabled","onClick","dijkstra","grid","startNode","finishNode","isRandomWeights","isVisited","finishNodeNeighbours","getUnvisitedNeighbors","finishNodeNeighbourVisits","visitedNodes","distance","cumulativeWeight","unvisitedNodes","nodes","node","push","getAllNodes","heapSortNodesByDistance","closestNode","shift","length","finishNodeNeighbour","filter","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbor","distace","previousNode","neighbors","neighborOperations","totalRows","totalCols","i","operation","newRow","newCol","NUM_ROWS","NUM_COLUMNS","NODE_REM","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","App","useRef","getInitialGrid","useCallback","currentRow","createNode","current","isShowCumulativeWeight","useState","setGrid","setIsVisualising","setIsPostVisualise","visitedNodeOrder","nodeRefArray","isResetting","isGenerateWeights","timeOut","isMousePressed","setIsMousePressed","isNewStartNode","setIsNewStartNode","isNewFinishNode","setIsNewFinishNode","toggleWeightHistory","isToggle","isRecoverToggle","useLayoutEffect","updateSize","setTimeout","window","innerHeight","Math","floor","innerWidth","addEventListener","removeEventListener","isStartRef","isFinishRef","isNotStartFinishRef","setNewStartOrFinishNode","setWall","touchElement","setTouchElement","newGrid","slice","prevNodeValues","wallNode","currentStartFinishNode","newStartFinishNode","prevStartFinishNodeValues","prevStartFinishNode","ceil","random","animateShortestPath","nodesInShortestPathOrder","delay","startNodeRow","startNodeCol","visualiseDijkstra","resetVisitedNodeCSS","nodeStart","nodeFinish","currentNode","unshift","getNodesInShortestPathOrder","nodeRef","innerText","animateDijkstra","perserveGrid","isRestore","finishNodeRow","finishNodeCol","currNode","style","display","forEach","timer","clearTimeout","initialGrid","resetGrid","restoreGrid","isToggleWeightBool","generateWeights","onMouseLeave","undefined","margin","marginTop","gridTemplateColumns","gridTemplateRows","gap","width","touchAction","fontFamily","fontSize","color","cursor","map","el","isNotVisualisation","isMouse","x","clientX","touches","y","clientY","element","document","elementFromPoint","rowAndCol","split","Number","classList","contains","handlePointerMoveForNode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.165f390b.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\nimport \"./Node.css\";\nimport \"../index.css\";\n\nexport default forwardRef((props, ref) => {\n  const {\n    row,\n    col,\n    isWall,\n    isStart,\n    isFinish,\n    handlePointerDownForNode,\n    handlePointerEnterForNode,\n    handleTouchMoveForNode,\n    handlePointerUpForNode,\n    displayWeight,\n    isShowWeight,\n  } = props;\n  const extraClassName = isFinish\n    ? \"node-finish\"\n    : isStart\n    ? \"node-start\"\n    : isWall\n    ? \"node-wall\"\n    : \"\";\n\n  return (\n    <div\n      id={`${row}-${col}`}\n      onPointerDown={() => handlePointerDownForNode(row, col)}\n      onMouseEnter={() => handlePointerEnterForNode(row, col)}\n      onTouchMove={(e) => handleTouchMoveForNode(e)}\n      onPointerUp={() => handlePointerUpForNode()}\n      onDragStart={(e) => {\n        // Block drag default event\n        e.preventDefault();\n        e.stopPropagation();\n      }}\n      ref={ref}\n      className={`node ${extraClassName}`}\n    >\n      {isStart\n        ? \"\"\n        : isFinish\n        ? \"\"\n        : displayWeight === Infinity\n        ? \"\"\n        : isShowWeight && !isWall\n        ? \"\"\n        : displayWeight}\n    </div>\n  );\n});\n","import React from \"react\";\nimport \"./Button.css\";\n\nexport default function Button(props) {\n  const {\n    type,\n    handleFunction,\n    disable,\n    title,\n    disabledTitle,\n    isVisualising,\n    isPostVisualise,\n  } = props;\n  const text = type\n    .replace(\"-\", \" \")\n    .replace(/(^\\w{1})|(\\s{1}\\w{1})/g, (match) => match.toUpperCase());\n  const displayText =\n    type === \"visualise\" && isPostVisualise && !isVisualising\n      ? \"Revisualise\"\n      : type === \"visualise\" && isVisualising\n      ? \"Visualising\"\n      : text;\n  const displayTitle =\n    type === \"restore\" && disable\n      ? disabledTitle\n      : type === \"toggle-weights\" && !disable\n      ? title\n      : type === \"toggle-weights\" && disable\n      ? disabledTitle\n      : \"\";\n  const className = isVisualising\n    ? `${type} visualising loading`\n    : isPostVisualise\n    ? `${type} notify`\n    : type;\n\n  return (\n    <button\n      shape={\"round\"}\n      title={displayTitle}\n      className={className}\n      disabled={disable}\n      onClick={() => handleFunction()}\n    >\n      {isVisualising && <i className={\"spinner\"} />}\n      {displayText}\n    </button>\n  );\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode, isRandomWeights) {\n  finishNode.isVisited = false;\n  finishNode.isWall = false;\n  const finishNodeNeighbours = getUnvisitedNeighbors(finishNode, grid);\n  let finishNodeNeighbourVisits = 0;\n  const visitedNodes = [];\n  startNode.distance = 0;\n  startNode.cumulativeWeight = 0;\n  startNode.isWall = false;\n  const unvisitedNodes = getAllNodes(grid);\n  // terminates when finishNode is reached\n  while (true) {\n    heapSortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodes;\n    closestNode.isVisited = true;\n    visitedNodes.push(closestNode);\n    if (isRandomWeights && finishNodeNeighbours.length > 1) {\n      for (const finishNodeNeighbour of finishNodeNeighbours) {\n        const row = finishNodeNeighbour.row;\n        const col = finishNodeNeighbour.col;\n        if (\n          closestNode.row === row &&\n          closestNode.col === col &&\n          closestNode.isVisited\n        ) {\n          finishNodeNeighbourVisits++;\n        }\n      }\n      if (finishNodeNeighbourVisits === finishNodeNeighbours.length) {\n        finishNodeNeighbours.filter((node) => (node.isVisited = false));\n        return visitedNodes;\n      }\n    } else {\n      if (closestNode === finishNode) return visitedNodes;\n    }\n    updateUnvisitedNeighbors(closestNode, grid, isRandomWeights);\n  }\n}\n\nfunction heapSortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid, isRandomWeights) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    // for weighted simulation\n    if (isRandomWeights) {\n      if (neighbor.distace === Infinity) {\n        neighbor.distance = neighbor.displayWeight + node.cumulativeWeight;\n        neighbor.cumulativeWeight = neighbor.distance;\n        neighbor.previousNode = node;\n      }\n      // checks and updates the neighbors for the path with the less cost\n      else if (\n        neighbor.distance >\n        neighbor.displayWeight + node.cumulativeWeight\n      ) {\n        neighbor.distance = neighbor.displayWeight + node.cumulativeWeight;\n        neighbor.cumulativeWeight = neighbor.distance;\n        neighbor.previousNode = node;\n      }\n    }\n    // for unweighted simulation\n    else {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { row, col } = node;\n  const neighborOperations = [\n    [0, 1],\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n  ];\n  const totalRows = grid.length;\n  const totalCols = grid[0].length;\n  //constant opeations => 4 values\n  for (let i = 0; i < neighborOperations.length; i++) {\n    const operation = neighborOperations[i];\n    const x = operation[0];\n    const y = operation[1];\n    const newRow = row + x;\n    const newCol = col - y;\n    if (\n      newRow >= 0 &&\n      newRow < totalRows &&\n      newCol >= 0 &&\n      newCol < totalCols &&\n      !grid[newRow][newCol].isWall\n    ) {\n      neighbors.push(grid[newRow][newCol]);\n    }\n  }\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { useState, useLayoutEffect, useCallback, useRef } from \"react\";\nimport Node from \"./components/Node.jsx\";\nimport Button from \"./components/Button.jsx\";\nimport {\n  getNodesInShortestPathOrder,\n  dijkstra,\n} from \"./algorithms/dijkstra.js\";\nimport \"./App.css\";\n\nlet NUM_ROWS;\n\nconst SMALL_NUM_ROWS = 10;\nlet NUM_COLUMNS;\nlet NODE_REM;\n\nlet START_NODE_ROW;\nlet START_NODE_COL;\nlet FINISH_NODE_ROW;\nlet FINISH_NODE_COL;\n\nconst App = () => {\n  const startNode = useRef();\n  const finishNode = useRef();\n\n  const getInitialGrid = useCallback(() => {\n    const grid = [];\n    for (let row = 0; row < NUM_ROWS; row++) {\n      const currentRow = [];\n      for (let col = 0; col < NUM_COLUMNS; col++) {\n        currentRow.push(createNode(row, col));\n        if (row === START_NODE_ROW && col === START_NODE_COL)\n          startNode.current = { row, col };\n        if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL)\n          finishNode.current = { row, col };\n      }\n      grid.push(currentRow);\n    }\n    return grid;\n  }, []);\n\n  const createNode = (\n    row,\n    col,\n    isWall = false,\n    cumulativeWeight = null,\n    startNode = { row: START_NODE_ROW, col: START_NODE_COL },\n    finishNode = { row: FINISH_NODE_ROW, col: FINISH_NODE_COL }\n  ) => {\n    return {\n      row,\n      col,\n      isWall: isWall,\n      isStart: row === startNode.row && col === startNode.col,\n      isFinish: row === finishNode.row && col === finishNode.col,\n      isVisited: false,\n      distance: Infinity,\n      previousNode: null,\n      displayWeight: cumulativeWeight,\n      cumulativeWeight,\n      isShowCumulativeWeight: false,\n    };\n  };\n\n  const [grid, setGrid] = useState(() => getInitialGrid());\n  const [isVisualising, setIsVisualising] = useState(false);\n  const [isPostVisualise, setIsPostVisualise] = useState(false);\n  const visitedNodeOrder = useRef([]);\n  const nodeRefArray = useRef([]);\n  const isResetting = useRef(false);\n  const isGenerateWeights = useRef(false);\n  const timeOut = useRef([]);\n  const [isMousePressed, setIsMousePressed] = useState(false);\n  const [isNewStartNode, setIsNewStartNode] = useState(false);\n  const [isNewFinishNode, setIsNewFinishNode] = useState(false);\n  const toggleWeightHistory = useRef([]);\n  const isToggle = useRef(false);\n  const isRecoverToggle = useRef(false);\n\n  useLayoutEffect(() => {\n    function updateSize() {\n      setTimeout(() => {\n        if (window.innerHeight > 480) {\n          NUM_ROWS = Math.floor(window.innerHeight * 0.003) * 10;\n        } else {\n          NUM_ROWS = SMALL_NUM_ROWS;\n        }\n        NUM_COLUMNS = Math.floor(window.innerWidth * 0.003) * 10;\n        NODE_REM = 2;\n\n        START_NODE_ROW = Math.floor(NUM_ROWS * 0.5);\n        START_NODE_COL = Math.floor(NUM_COLUMNS * 0.25);\n        FINISH_NODE_ROW = Math.floor(NUM_ROWS * 0.5);\n        FINISH_NODE_COL = Math.floor(NUM_COLUMNS * 0.75);\n\n        setGrid(getInitialGrid());\n      }, 500);\n    }\n    window.addEventListener(\"resize\", () => {\n      if (window.innerHeight > 480) updateSize();\n    });\n    updateSize();\n    return () =>\n      window.removeEventListener(\"resize\", () => {\n        if (window.innerHeight > 480) updateSize();\n      });\n  }, [getInitialGrid]);\n\n  const handlePointerDownForNode = (row, col) => {\n    setIsMousePressed(true);\n    const isStartRef =\n      row === startNode.current.row && col === startNode.current.col;\n\n    const isFinishRef =\n      row === finishNode.current.row && col === finishNode.current.col;\n\n    const isNotVisualisation = !isVisualising && !isPostVisualise;\n\n    if (isStartRef && isNotVisualisation) {\n      setIsNewStartNode(true);\n    } else if (isFinishRef && isNotVisualisation) {\n      setIsNewFinishNode(true);\n    } else if (isNotVisualisation) setWall(grid, row, col);\n  };\n\n  const handlePointerEnterForNode = (row, col) => {\n    if (!isMousePressed && !isVisualising) return;\n\n    const isStartRef =\n      row === startNode.current.row && col === startNode.current.col;\n\n    const isFinishRef =\n      row === finishNode.current.row && col === finishNode.current.col;\n\n    const isNotStartFinishRef = !isStartRef && !isFinishRef;\n\n    if (isNewStartNode && isNotStartFinishRef) {\n      setNewStartOrFinishNode(grid, row, col);\n    } else if (isNewFinishNode && isNotStartFinishRef) {\n      setNewStartOrFinishNode(grid, row, col);\n    } else if (!isVisualising && !isPostVisualise && isNotStartFinishRef)\n      setWall(grid, row, col);\n  };\n\n  // stops touch move from setting the same element multiple times\n  const [touchElement, setTouchElement] = useState(null);\n\n  const handlePointerMoveForNode = (e, isMouse) => {\n    const x = isMouse ? e.clientX : e.touches[0].clientX;\n    const y = isMouse ? e.clientY : e.touches[0].clientY;\n\n    const element = document.elementFromPoint(x, y);\n    const rowAndCol = element.id.split(\"-\");\n\n    const row = Number(rowAndCol[0]);\n    const col = Number(rowAndCol[1]);\n\n    if (element.classList.contains(\"node\") && touchElement !== element) {\n      setTouchElement(element);\n      handlePointerEnterForNode(row, col);\n    }\n    return;\n  };\n\n  const handlePointerUpForNode = () => {\n    setIsMousePressed(false);\n    setIsNewStartNode(false);\n    setIsNewFinishNode(false);\n  };\n\n  const handlePointerUpForGrid = () => {\n    handlePointerUpForNode();\n  };\n\n  const handleMouseLeaveForGrid = () => {\n    window.addEventListener(\"mouseup\", () => handlePointerUpForNode());\n  };\n\n  const setWall = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const prevNodeValues = newGrid[row][col];\n    const wallNode = {\n      ...prevNodeValues,\n      displayWeight: prevNodeValues.displayWeight,\n      isShowWeight: false,\n      isWall: !prevNodeValues.isWall,\n    };\n    newGrid[row][col] = wallNode;\n    setGrid(newGrid);\n  };\n\n  const setNewStartOrFinishNode = (grid, row, col) => {\n    const newGrid = grid.slice();\n    // keep the new start or finish nodes previous (json) values\n    const prevNodeValues = newGrid[row][col];\n    const currentStartFinishNode = isNewStartNode\n      ? startNode.current\n      : finishNode.current;\n    // only change the type of the start or finish node\n    const type = isNewStartNode ? \"isStart\" : \"isFinish\";\n    const newStartFinishNode = {\n      ...prevNodeValues,\n      isWall: prevNodeValues.isWall,\n      [type]: true,\n    };\n    const prevStartFinishNodeValues =\n      newGrid[currentStartFinishNode.row][currentStartFinishNode.col];\n    // change the old start or finish node type to false\n    const prevStartFinishNode = {\n      ...prevStartFinishNodeValues,\n      displayWeight:\n        prevStartFinishNodeValues.displayWeight === null &&\n        isGenerateWeights.current &&\n        !prevStartFinishNodeValues.isWall\n          ? Math.ceil(Math.random() * 10)\n          : prevStartFinishNodeValues.displayWeight,\n      [type]: false,\n    };\n    newGrid[row][col] = newStartFinishNode;\n    newGrid[currentStartFinishNode.row][\n      currentStartFinishNode.col\n    ] = prevStartFinishNode;\n    // update start or finish node reference\n    if (isNewStartNode) {\n      startNode.current = { row, col };\n    } else {\n      finishNode.current = { row, col };\n    }\n    setGrid(newGrid);\n  };\n\n  const animateDijkstra = (visitedNodeOrder, nodesInShortestPathOrder) => {\n    for (let i = 0; i <= visitedNodeOrder.length; i++) {\n      if (i === visitedNodeOrder.length) {\n        timeOut.current.push(\n          setTimeout(() => {\n            animateShortestPath(nodesInShortestPathOrder);\n          }, 5 * i)\n        );\n        return;\n      }\n      timeOut.current.push(\n        setTimeout(() => {\n          const node = visitedNodeOrder[i];\n          const nodeRef = nodeRefArray.current[`${node.row}-${node.col}`];\n          // displays cumulative weight if in random weight simulation\n          if (isGenerateWeights.current)\n            nodeRef.innerText = `${node.cumulativeWeight}`;\n          nodeRef.className = \"node node-visited\";\n        }, 5 * i)\n      );\n    }\n  };\n\n  const animateShortestPath = (nodesInShortestPathOrder) => {\n    let delay = 0;\n    if (nodesInShortestPathOrder[0].isStart) {\n      for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        delay = i;\n        timeOut.current.push(\n          setTimeout(() => {\n            const node = nodesInShortestPathOrder[i];\n            nodeRefArray.current[`${node.row}-${node.col}`].className =\n              \"node node-shortest-path\";\n          }, 50 * i)\n        );\n      }\n    } else {\n      const startNodeRow = startNode.current.row;\n      const startNodeCol = startNode.current.col;\n      nodeRefArray.current[`${startNodeRow}-${startNodeCol}`].className =\n        \"node node-start\";\n    }\n    timeOut.current.push(\n      setTimeout(() => {\n        setIsVisualising(false);\n        setIsPostVisualise(true);\n      }, 55 * delay)\n    );\n  };\n\n  const visualiseDijkstra = () => {\n    // resets css when resimulating\n    if (isPostVisualise) resetVisitedNodeCSS();\n    setIsVisualising(true);\n    const nodeStart = grid[startNode.current.row][startNode.current.col];\n    const nodeFinish = grid[finishNode.current.row][finishNode.current.col];\n    visitedNodeOrder.current = dijkstra(\n      grid,\n      nodeStart,\n      nodeFinish,\n      isGenerateWeights.current\n    );\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(nodeFinish);\n    animateDijkstra(visitedNodeOrder.current, nodesInShortestPathOrder);\n  };\n\n  const resetGrid = () => {\n    isGenerateWeights.current = false;\n    timeOut.current.forEach((timer) => {\n      clearTimeout(timer);\n    });\n    isResetting.current = true;\n    setIsVisualising(false);\n    setIsMousePressed(false);\n    setIsPostVisualise(false);\n    const initialGrid = getInitialGrid();\n    setGrid(initialGrid);\n    resetVisitedNodeCSS();\n    toggleWeightHistory.current = [];\n  };\n\n  const resetVisitedNodeCSS = () => {\n    const nodeStart = isPostVisualise\n      ? startNode.current\n      : { row: START_NODE_ROW, col: START_NODE_COL };\n\n    const nodeFinish = isPostVisualise\n      ? finishNode.current\n      : { row: FINISH_NODE_ROW, col: FINISH_NODE_COL };\n\n    for (let i = 0; i < visitedNodeOrder.current.length; i++) {\n      const node = visitedNodeOrder.current[i];\n      const nodeRef = nodeRefArray.current[`${node.row}-${node.col}`];\n\n      if (node.row === nodeStart.row && node.col === nodeStart.col) {\n        nodeRef.innerText = \"\";\n        nodeRef.className = \"node node-start\";\n      } else if (node.row === nodeFinish.row && node.col === nodeFinish.col) {\n        nodeRef.innerText = \"\";\n        nodeRef.className = \"node node-finish\";\n      } else {\n        if ((isVisualising || isPostVisualise) && isGenerateWeights.current) {\n          nodeRef.innerText = `${node.displayWeight}`;\n        } else {\n          nodeRef.innerText = \"\";\n        }\n        nodeRef.className = \"node\";\n      }\n    }\n  };\n\n  const restoreGrid = (isRestore = true) => {\n    timeOut.current.forEach((timer) => {\n      clearTimeout(timer);\n    });\n    setIsVisualising(false);\n    setIsMousePressed(false);\n    setIsPostVisualise(false);\n    resetVisitedNodeCSS();\n    perserveGrid(grid, isRestore);\n  };\n\n  const perserveGrid = (grid, isRestore) => {\n    const newGrid = [];\n    const startNodeRow = startNode.current.row;\n    const startNodeCol = startNode.current.col;\n    const finishNodeRow = finishNode.current.row;\n    const finishNodeCol = finishNode.current.col;\n    for (let row = 0; row < NUM_ROWS; row++) {\n      const currentRow = [];\n      for (let col = 0; col < NUM_COLUMNS; col++) {\n        const nodeRef = nodeRefArray.current[`${row}-${col}`];\n        if (row === startNodeRow && col === startNodeCol) {\n          currentRow.push(\n            createNode(\n              startNodeRow,\n              startNodeCol,\n              false,\n              null,\n              { row: startNodeRow, col: startNodeCol },\n              { row: finishNodeRow, col: finishNodeCol }\n            )\n          );\n\n          nodeRef.innerText = \"\";\n          nodeRef.className = \"node node-start\";\n        } else if (row === finishNodeRow && col === finishNodeCol) {\n          currentRow.push(\n            createNode(\n              finishNodeRow,\n              finishNodeCol,\n              false,\n              null,\n              { row: startNodeRow, col: startNodeCol },\n              { row: finishNodeRow, col: finishNodeCol }\n            )\n          );\n\n          nodeRef.innerText = \"\";\n          nodeRef.className = \"node node-finish\";\n        } else {\n          const currNode = grid[row][col];\n\n          const displayWeight = isRecoverToggle.current\n            ? toggleWeightHistory.current[row][col].displayWeight\n            : isToggle.current\n            ? null\n            : isRestore\n            ? currNode.displayWeight\n            : Math.random() > 0.5\n            ? Math.ceil(Math.random() * 10)\n            : 1;\n\n          currentRow.push(\n            createNode(\n              row,\n              col,\n              currNode.isWall,\n              displayWeight,\n              { row: startNodeRow, col: startNodeCol },\n              { row: finishNodeRow, col: finishNodeCol }\n            )\n          );\n          nodeRef.className = currNode.isWall ? \"node node-wall\" : \"node\";\n        }\n      }\n      newGrid.push(currentRow);\n    }\n    setGrid(newGrid);\n    return newGrid;\n  };\n\n  const generateWeights = (grid, isToggleWeightBool, isRestore = false) => {\n    isGenerateWeights.current = isToggleWeightBool;\n    isToggle.current = false;\n    const newGrid = perserveGrid(grid, isRestore);\n    if (isGenerateWeights.current) {\n      toggleWeightHistory.current = newGrid;\n    }\n  };\n\n  const toggleWeights = () => {\n    isGenerateWeights.current = !isGenerateWeights.current;\n    isToggle.current = !isToggle.current;\n    if (isToggle.current) {\n      perserveGrid(grid, false);\n    } else {\n      isRecoverToggle.current = true;\n      perserveGrid(grid, false);\n      isRecoverToggle.current = false;\n    }\n  };\n\n  return (\n    <>\n      <div\n        className=\"galaxy-fold-open-your-device\"\n        style={{ display: \"none\" }}\n      ></div>\n      <div className=\"App\">\n        <div className=\"button-container\">\n          <Button type={\"reset\"} handleFunction={() => resetGrid()}></Button>\n          <Button\n            type={\"restore\"}\n            handleFunction={() => restoreGrid(grid)}\n            disable={!(isVisualising || isPostVisualise)}\n            disabledTitle={\"Restores state before the visualisation\"}\n          ></Button>\n          <Button\n            type={\"toggle-weights\"}\n            handleFunction={() => toggleWeights()}\n            disable={\n              !toggleWeightHistory.current.length ||\n              isVisualising ||\n              isPostVisualise\n            }\n          ></Button>\n          <Button\n            type={\"generate-weights\"}\n            handleFunction={() => generateWeights(grid, true)}\n            disable={isVisualising || isPostVisualise}\n            title={\"Generates random weights to each node. Click to toggle.\"}\n            disabledTitle={\"Can only reassign random weights on restore\"}\n          ></Button>\n          <Button\n            type={\"visualise\"}\n            handleFunction={() => visualiseDijkstra()}\n            disable={isVisualising}\n            isVisualising={isVisualising}\n            isPostVisualise={isPostVisualise}\n          ></Button>\n        </div>\n        <div\n          className=\"grid\"\n          onPointerUp={() => handlePointerUpForGrid()}\n          onMouseLeave={() => handleMouseLeaveForGrid()}\n          title={\n            isPostVisualise\n              ? \"Click 'Restore' to adjust start, finish and wall nodes\"\n              : undefined\n          }\n          style={{\n            margin: \"auto\",\n            display: \"grid\",\n            marginTop: \"1rem\",\n\n            gridTemplateColumns: `repeat(${NUM_COLUMNS}, ${NODE_REM}rem)`,\n            gridTemplateRows: `repeat(${NUM_ROWS}, ${NODE_REM}rem)`,\n            gap: \"1px\",\n            //makes the grid width relative to sum of all node pixels\n            // 1px === 0.06rem. NUM_COLUMNS * 0.06 is to account for the gap of 1px\n            width: `${NUM_COLUMNS * NODE_REM + NUM_COLUMNS * 0.06}rem`,\n            touchAction: \"none\",\n            fontFamily: \"Alcubierre\",\n            fontSize: \"1rem\",\n            color: \"black\",\n            cursor: isVisualising ? \"progress\" : \"pointer\",\n          }}\n        >\n          {grid.map((row) =>\n            row.map((node) => {\n              const {\n                row,\n                col,\n                isWall,\n                isStart,\n                isFinish,\n                isVisited,\n                displayWeight,\n                cumulativeWeight,\n                isShowCumulativeWeight: isShowWeight,\n              } = node;\n              return (\n                <Node\n                  key={`${row}-${col}`}\n                  ref={(el) => (nodeRefArray.current[`${row}-${col}`] = el)}\n                  handlePointerDownForNode={(row, col) =>\n                    handlePointerDownForNode(row, col)\n                  }\n                  handlePointerEnterForNode={(row, col) =>\n                    handlePointerEnterForNode(row, col)\n                  }\n                  handleTouchMoveForNode={(e) =>\n                    handlePointerMoveForNode(e, false)\n                  }\n                  handlePointerUpForNode={() => handlePointerUpForNode()}\n                  row={row}\n                  col={col}\n                  isWall={isWall}\n                  isStart={isStart}\n                  isFinish={isFinish}\n                  isVisited={isVisited}\n                  displayWeight={displayWeight}\n                  cumulativeWeight={cumulativeWeight}\n                  isShowWeight={isShowWeight}\n                ></Node>\n              );\n            })\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}